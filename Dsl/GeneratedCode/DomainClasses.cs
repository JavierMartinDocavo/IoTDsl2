//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass IoTDsl
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTDsl.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.IoTDsl.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9d864e78-9706-4d92-8373-e01c4838d0bb")]
	public partial class IoTDsl : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IoTDsl domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d864e78, 0x9706, 0x4d92, 0x83, 0x73, 0xe0, 0x1c, 0x48, 0x38, 0xd0, 0xbb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTDsl(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTDsl(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Provider domain property code
		
		/// <summary>
		/// Provider domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProviderDomainPropertyId = new global::System.Guid(0xbcaf719f, 0x53eb, 0x4477, 0xb2, 0x9e, 0x82, 0x59, 0xe7, 0x6b, 0x80, 0xb9);
		
		/// <summary>
		/// Storage for Provider
		/// </summary>
		private Provider providerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Provider domain property.
		/// Descripción de Compañía.IotDsl.IoTDsl.Provider
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTDsl/Provider.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IoTDsl/Provider.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bcaf719f-53eb-4477-b29e-8259e76b80b9")]
		public Provider Provider
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return providerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProviderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IoTDsl.Provider domain property.
		/// </summary>
		internal sealed partial class ProviderPropertyHandler : DslModeling::DomainPropertyValueHandler<IoTDsl, Provider>
		{
			private ProviderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IoTDsl.Provider domain property value handler.
			/// </summary>
			public static readonly ProviderPropertyHandler Instance = new ProviderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IoTDsl.Provider domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProviderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Provider GetValue(IoTDsl element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.providerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IoTDsl element, Provider newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Provider oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.providerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Subscription domain property code
		
		/// <summary>
		/// Subscription domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubscriptionDomainPropertyId = new global::System.Guid(0x66cd36f4, 0xa293, 0x4922, 0x9a, 0x62, 0x09, 0x82, 0x15, 0xa3, 0x5f, 0x82);
		
		/// <summary>
		/// Storage for Subscription
		/// </summary>
		private global::System.String subscriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Subscription domain property.
		/// Descripción de Compañía.IotDsl.IoTDsl.Subscription
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTDsl/Subscription.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IoTDsl/Subscription.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("66cd36f4-a293-4922-9a62-098215a35f82")]
		public global::System.String Subscription
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subscriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubscriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IoTDsl.Subscription domain property.
		/// </summary>
		internal sealed partial class SubscriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<IoTDsl, global::System.String>
		{
			private SubscriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IoTDsl.Subscription domain property value handler.
			/// </summary>
			public static readonly SubscriptionPropertyHandler Instance = new SubscriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IoTDsl.Subscription domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubscriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IoTDsl element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subscriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IoTDsl element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subscriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServicePlan domain property code
		
		/// <summary>
		/// ServicePlan domain property Id.
		/// </summary>
		public static readonly global::System.Guid ServicePlanDomainPropertyId = new global::System.Guid(0xcba818bd, 0x3db8, 0x4ea0, 0xa4, 0xfd, 0x8f, 0xb4, 0xd6, 0xca, 0xd3, 0xcc);
		
		/// <summary>
		/// Storage for ServicePlan
		/// </summary>
		private global::System.String servicePlanPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ServicePlan domain property.
		/// Descripción de Compañía.IotDsl.IoTDsl.Service Plan
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTDsl/ServicePlan.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IoTDsl/ServicePlan.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cba818bd-3db8-4ea0-a4fd-8fb4d6cad3cc")]
		public global::System.String ServicePlan
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return servicePlanPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ServicePlanPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IoTDsl.ServicePlan domain property.
		/// </summary>
		internal sealed partial class ServicePlanPropertyHandler : DslModeling::DomainPropertyValueHandler<IoTDsl, global::System.String>
		{
			private ServicePlanPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IoTDsl.ServicePlan domain property value handler.
			/// </summary>
			public static readonly ServicePlanPropertyHandler Instance = new ServicePlanPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IoTDsl.ServicePlan domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ServicePlanDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IoTDsl element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.servicePlanPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IoTDsl element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.servicePlanPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceGroups opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ResourceGroups.
		/// Descripción de Compañía.IotDsl.IotDslHasResourceGroups.IoTDsl
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ResourceGroup> ResourceGroups
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ResourceGroup>, ResourceGroup>(global::Compañía.IotDsl.IotDslHasResourceGroups.IoTDslDomainRoleId);
			}
		}
		#endregion
		#region Devices opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Devices.
		/// Descripción de Compañía.IotDsl.IoTDslHasDevices.IoTDsl
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Device> Devices
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(global::Compañía.IotDsl.IoTDslHasDevices.IoTDslDomainRoleId);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// Descripción de Compañía.IotDsl.IoTDslTieneSensors.IoTDsl
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::Compañía.IotDsl.IoTDslTieneSensors.IoTDslDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Compañía.IotDsl.ResourceGroup.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Compañía.IotDsl.Device.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Compañía.IotDsl.Sensor.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Compañía.IotDsl.ResourceGroup sourceResourceGroup1 = sourceElement as global::Compañía.IotDsl.ResourceGroup;
			if (sourceResourceGroup1 != null)
			{
				// Create link for path IotDslHasResourceGroups.ResourceGroups
				this.ResourceGroups.Add(sourceResourceGroup1);

				return;
			}
				
			global::Compañía.IotDsl.Device sourceDevice2 = sourceElement as global::Compañía.IotDsl.Device;
			if (sourceDevice2 != null)
			{
				// Create link for path IoTDslHasDevices.Devices
				this.Devices.Add(sourceDevice2);

				return;
			}
				
			global::Compañía.IotDsl.Sensor sourceSensor3 = sourceElement as global::Compañía.IotDsl.Sensor;
			if (sourceSensor3 != null)
			{
				// Create link for path IoTDslTieneSensors.Sensors
				this.Sensors.Add(sourceSensor3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Compañía.IotDsl.ResourceGroup sourceResourceGroup1 = sourceElement as global::Compañía.IotDsl.ResourceGroup;
			if (sourceResourceGroup1 != null)
			{
				// Delete link for path IotDslHasResourceGroups.ResourceGroups
				
				foreach (DslModeling::ElementLink link in global::Compañía.IotDsl.IotDslHasResourceGroups.GetLinks((global::Compañía.IotDsl.IoTDsl)this, sourceResourceGroup1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Compañía.IotDsl.IotDslHasResourceGroups.IoTDslDomainRoleId, global::Compañía.IotDsl.IotDslHasResourceGroups.ResourceGroupDomainRoleId);
				}

				return;
			}
				
			global::Compañía.IotDsl.Device sourceDevice2 = sourceElement as global::Compañía.IotDsl.Device;
			if (sourceDevice2 != null)
			{
				// Delete link for path IoTDslHasDevices.Devices
				
				foreach (DslModeling::ElementLink link in global::Compañía.IotDsl.IoTDslHasDevices.GetLinks((global::Compañía.IotDsl.IoTDsl)this, sourceDevice2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Compañía.IotDsl.IoTDslHasDevices.IoTDslDomainRoleId, global::Compañía.IotDsl.IoTDslHasDevices.DeviceDomainRoleId);
				}

				return;
			}
				
			global::Compañía.IotDsl.Sensor sourceSensor3 = sourceElement as global::Compañía.IotDsl.Sensor;
			if (sourceSensor3 != null)
			{
				// Delete link for path IoTDslTieneSensors.Sensors
				
				foreach (DslModeling::ElementLink link in global::Compañía.IotDsl.IoTDslTieneSensors.GetLinks((global::Compañía.IotDsl.IoTDsl)this, sourceSensor3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Compañía.IotDsl.IoTDslTieneSensors.IoTDslDomainRoleId, global::Compañía.IotDsl.IoTDslTieneSensors.SensorDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass ResourceGroup
	/// Descripción de Compañía.IotDsl.ResourceGroup
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("1e7eb002-c3cd-48ac-b9fb-f25820f421d4")]
	public partial class ResourceGroup : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ResourceGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e7eb002, 0xc3cd, 0x48ac, 0xb9, 0xfb, 0xf2, 0x58, 0x20, 0xf4, 0x21, 0xd4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ResourceGroup(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ResourceGroup(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x6bfedd9f, 0xb33c, 0x414c, 0xa8, 0xa8, 0xd7, 0x07, 0x1f, 0x56, 0xf3, 0xe1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descripción de Compañía.IotDsl.ResourceGroup.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroup/Name.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroup/Name.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("6bfedd9f-b33c-414c-a8a8-d7071f56f3e1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ResourceGroup.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ResourceGroup, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ResourceGroup.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ResourceGroup.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ResourceGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ResourceGroup element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Location domain property code
		
		/// <summary>
		/// Location domain property Id.
		/// </summary>
		public static readonly global::System.Guid LocationDomainPropertyId = new global::System.Guid(0xc97501cb, 0x4954, 0x4302, 0xbf, 0x95, 0x68, 0x40, 0xe6, 0xd8, 0x31, 0xc1);
		
		/// <summary>
		/// Storage for Location
		/// </summary>
		private Location locationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Location domain property.
		/// Descripción de Compañía.IotDsl.ResourceGroup.Location
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroup/Location.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroup/Location.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c97501cb-4954-4302-bf95-6840e6d831c1")]
		public Location Location
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return locationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ResourceGroup.Location domain property.
		/// </summary>
		internal sealed partial class LocationPropertyHandler : DslModeling::DomainPropertyValueHandler<ResourceGroup, Location>
		{
			private LocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ResourceGroup.Location domain property value handler.
			/// </summary>
			public static readonly LocationPropertyHandler Instance = new LocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ResourceGroup.Location domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Location GetValue(ResourceGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.locationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ResourceGroup element, Location newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Location oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.locationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoTDsl opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTDsl.
		/// Descripción de Compañía.IotDsl.IotDslHasResourceGroups.ResourceGroup
		/// </summary>
		public virtual IoTDsl IoTDsl
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.IotDslHasResourceGroups.ResourceGroupDomainRoleId) as IoTDsl;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.IotDslHasResourceGroups.ResourceGroupDomainRoleId, value);
			}
		}
		#endregion
		#region CloudServices opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CloudServices.
		/// Descripción de Compañía.IotDsl.ResourceGroupHasCloudServices.ResourceGroup
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CloudService> CloudServices
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CloudService>, CloudService>(global::Compañía.IotDsl.ResourceGroupHasCloudServices.ResourceGroupDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Compañía.IotDsl.CloudService.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Compañía.IotDsl.CloudService sourceCloudService1 = sourceElement as global::Compañía.IotDsl.CloudService;
			if (sourceCloudService1 != null)
			{
				// Create link for path ResourceGroupHasCloudServices.CloudServices
				this.CloudServices.Add(sourceCloudService1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Compañía.IotDsl.CloudService sourceCloudService1 = sourceElement as global::Compañía.IotDsl.CloudService;
			if (sourceCloudService1 != null)
			{
				// Delete link for path ResourceGroupHasCloudServices.CloudServices
				
				foreach (DslModeling::ElementLink link in global::Compañía.IotDsl.ResourceGroupHasCloudServices.GetLinks((global::Compañía.IotDsl.ResourceGroup)this, sourceCloudService1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Compañía.IotDsl.ResourceGroupHasCloudServices.ResourceGroupDomainRoleId, global::Compañía.IotDsl.ResourceGroupHasCloudServices.CloudServiceDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass IoTCenter
	/// Descripción de Compañía.IotDsl.IoTCenter
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTCenter.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.IoTCenter.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("524e847c-b507-4bd4-9679-f74a7cb0a251")]
	public partial class IoTCenter : CloudService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IoTCenter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x524e847c, 0xb507, 0x4bd4, 0x96, 0x79, 0xf7, 0x4a, 0x7c, 0xb0, 0xa2, 0x51);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTCenter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTCenter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Endpoints opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Endpoints.
		/// Descripción de Compañía.IotDsl.IoTCenterHasEndpoints.IoTCenter
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Endpoint> Endpoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoint>, Endpoint>(global::Compañía.IotDsl.IoTCenterHasEndpoints.IoTCenterDomainRoleId);
			}
		}
		#endregion
		#region Devices opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Devices.
		/// Descripción de Compañía.IotDsl.IoTCenterHasDevices.IoTCenter
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Device> Devices
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Device>, Device>(global::Compañía.IotDsl.IoTCenterHasDevices.IoTCenterDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Compañía.IotDsl.Endpoint.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Compañía.IotDsl.Endpoint sourceEndpoint1 = sourceElement as global::Compañía.IotDsl.Endpoint;
			if (sourceEndpoint1 != null)
			{
				// Create link for path IoTCenterHasEndpoints.Endpoints
				this.Endpoints.Add(sourceEndpoint1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Compañía.IotDsl.Endpoint sourceEndpoint1 = sourceElement as global::Compañía.IotDsl.Endpoint;
			if (sourceEndpoint1 != null)
			{
				// Delete link for path IoTCenterHasEndpoints.Endpoints
				
				foreach (DslModeling::ElementLink link in global::Compañía.IotDsl.IoTCenterHasEndpoints.GetLinks((global::Compañía.IotDsl.IoTCenter)this, sourceEndpoint1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Compañía.IotDsl.IoTCenterHasEndpoints.IoTCenterDomainRoleId, global::Compañía.IotDsl.IoTCenterHasEndpoints.EndpointDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass Endpoint
	/// Descripción de Compañía.IotDsl.Endpoint
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.Endpoint.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.Endpoint.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a2d11186-3514-48be-80ce-00f278229192")]
	public partial class Endpoint : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Endpoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2d11186, 0x3514, 0x48be, 0x80, 0xce, 0x00, 0xf2, 0x78, 0x22, 0x91, 0x92);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Endpoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Endpoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CloudService opposite domain role accessor
		/// <summary>
		/// Gets or sets CloudService.
		/// Descripción de Compañía.IotDsl.EndpointConnectsCloudService.Endpoint
		/// </summary>
		public virtual CloudService CloudService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.EndpointConnectsCloudService.EndpointDomainRoleId) as CloudService;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.EndpointConnectsCloudService.EndpointDomainRoleId, value);
			}
		}
		#endregion
		#region IoTCenter opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTCenter.
		/// Descripción de Compañía.IotDsl.IoTCenterHasEndpoints.Endpoint
		/// </summary>
		public virtual IoTCenter IoTCenter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.IoTCenterHasEndpoints.EndpointDomainRoleId) as IoTCenter;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.IoTCenterHasEndpoints.EndpointDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass CloudService
	/// Descripción de Compañía.IotDsl.CloudService
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.CloudService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.CloudService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("048d73b8-38ac-4094-8d21-2819e5f949a2")]
	public partial class CloudService : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CloudService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x048d73b8, 0x38ac, 0x4094, 0x8d, 0x21, 0x28, 0x19, 0xe5, 0xf9, 0x49, 0xa2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudService(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudService(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xe6739753, 0x6c87, 0x4ac7, 0xaf, 0xae, 0xeb, 0x12, 0x32, 0x7e, 0xf0, 0x05);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descripción de Compañía.IotDsl.CloudService.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.CloudService/Name.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.CloudService/Name.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("e6739753-6c87-4ac7-afae-eb12327ef005")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CloudService.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CloudService, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CloudService.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CloudService.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CloudService element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CloudService element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConnectionString domain property code
		
		/// <summary>
		/// ConnectionString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConnectionStringDomainPropertyId = new global::System.Guid(0x6c204aac, 0x1bd4, 0x48d4, 0xac, 0xcf, 0xc5, 0xcf, 0x7d, 0x36, 0x4e, 0xdd);
		
		/// <summary>
		/// Storage for ConnectionString
		/// </summary>
		private global::System.String connectionStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ConnectionString domain property.
		/// Descripción de Compañía.IotDsl.CloudService.Connection String
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.CloudService/ConnectionString.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.CloudService/ConnectionString.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6c204aac-1bd4-48d4-accf-c5cf7d364edd")]
		public global::System.String ConnectionString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return connectionStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConnectionStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CloudService.ConnectionString domain property.
		/// </summary>
		internal sealed partial class ConnectionStringPropertyHandler : DslModeling::DomainPropertyValueHandler<CloudService, global::System.String>
		{
			private ConnectionStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CloudService.ConnectionString domain property value handler.
			/// </summary>
			public static readonly ConnectionStringPropertyHandler Instance = new ConnectionStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CloudService.ConnectionString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConnectionStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CloudService element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.connectionStringPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CloudService element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.connectionStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets ResourceGroup.
		/// Descripción de Compañía.IotDsl.ResourceGroupHasCloudServices.CloudService
		/// </summary>
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.ResourceGroupHasCloudServices.CloudServiceDomainRoleId) as ResourceGroup;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.ResourceGroupHasCloudServices.CloudServiceDomainRoleId, value);
			}
		}
		#endregion
		#region ConnectedEndpoints opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConnectedEndpoints.
		/// Descripción de Compañía.IotDsl.EndpointConnectsCloudService.CloudService
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Endpoint> ConnectedEndpoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoint>, Endpoint>(global::Compañía.IotDsl.EndpointConnectsCloudService.CloudServiceDomainRoleId);
			}
		}
		#endregion
		#region DataAnalyticsInput opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DataAnalyticsInput.
		/// Descripción de Compañía.IotDsl.DataAnalyticsReferencesInput.CloudService
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataAnalytics> DataAnalyticsInput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DataAnalytics>, DataAnalytics>(global::Compañía.IotDsl.DataAnalyticsReferencesInput.CloudServiceDomainRoleId);
			}
		}
		#endregion
		#region DataAnalyticsOutput opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DataAnalyticsOutput.
		/// Descripción de Compañía.IotDsl.DataAnalyticsReferencesOutput.CloudService
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataAnalytics> DataAnalyticsOutput
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DataAnalytics>, DataAnalytics>(global::Compañía.IotDsl.DataAnalyticsReferencesOutput.CloudServiceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass SQLStorage
	/// Descripción de Compañía.IotDsl.SQLStorage
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.SQLStorage.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.SQLStorage.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("18ff41c2-6656-454e-91a8-d744530f3d93")]
	public partial class SQLStorage : CloudService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SQLStorage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18ff41c2, 0x6656, 0x454e, 0x91, 0xa8, 0xd7, 0x44, 0x53, 0x0f, 0x3d, 0x93);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLStorage(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLStorage(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region User domain property code
		
		/// <summary>
		/// User domain property Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainPropertyId = new global::System.Guid(0x49f84dc2, 0x7234, 0x4c58, 0x8d, 0x16, 0x28, 0x0d, 0x19, 0xe2, 0xf8, 0xfd);
		
		/// <summary>
		/// Storage for User
		/// </summary>
		private global::System.String userPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of User domain property.
		/// Descripción de Compañía.IotDsl.SQLStorage.User
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.SQLStorage/User.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.SQLStorage/User.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("49f84dc2-7234-4c58-8d16-280d19e2f8fd")]
		public global::System.String User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return userPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UserPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SQLStorage.User domain property.
		/// </summary>
		internal sealed partial class UserPropertyHandler : DslModeling::DomainPropertyValueHandler<SQLStorage, global::System.String>
		{
			private UserPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SQLStorage.User domain property value handler.
			/// </summary>
			public static readonly UserPropertyHandler Instance = new UserPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SQLStorage.User domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UserDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SQLStorage element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.userPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SQLStorage element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.userPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Password domain property code
		
		/// <summary>
		/// Password domain property Id.
		/// </summary>
		public static readonly global::System.Guid PasswordDomainPropertyId = new global::System.Guid(0x470bb7f6, 0xe6d0, 0x488b, 0xa2, 0xc3, 0x0a, 0xc3, 0x40, 0xa1, 0xe6, 0x24);
		
		/// <summary>
		/// Storage for Password
		/// </summary>
		private global::System.String passwordPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Password domain property.
		/// Descripción de Compañía.IotDsl.SQLStorage.Password
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.SQLStorage/Password.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.SQLStorage/Password.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("470bb7f6-e6d0-488b-a2c3-0ac340a1e624")]
		public global::System.String Password
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return passwordPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PasswordPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SQLStorage.Password domain property.
		/// </summary>
		internal sealed partial class PasswordPropertyHandler : DslModeling::DomainPropertyValueHandler<SQLStorage, global::System.String>
		{
			private PasswordPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SQLStorage.Password domain property value handler.
			/// </summary>
			public static readonly PasswordPropertyHandler Instance = new PasswordPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SQLStorage.Password domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PasswordDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SQLStorage element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.passwordPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SQLStorage element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.passwordPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass NoSQLStorage
	/// Descripción de Compañía.IotDsl.NoSQLStorage
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.NoSQLStorage.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.NoSQLStorage.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4dea8e6b-532d-4012-85c0-1a580b7376c3")]
	public partial class NoSQLStorage : CloudService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NoSQLStorage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4dea8e6b, 0x532d, 0x4012, 0x85, 0xc0, 0x1a, 0x58, 0x0b, 0x73, 0x76, 0xc3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NoSQLStorage(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NoSQLStorage(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass AppService
	/// Descripción de Compañía.IotDsl.AppService
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.AppService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.AppService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("18d3836a-f3b0-4db1-93a5-53812c5fde7a")]
	public partial class AppService : CloudService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AppService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18d3836a, 0xf3b0, 0x4db1, 0x93, 0xa5, 0x53, 0x81, 0x2c, 0x5f, 0xde, 0x7a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AppService(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AppService(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region MessageService opposite domain role accessor
		/// <summary>
		/// Gets or sets MessageService.
		/// Descripción de Compañía.IotDsl.AppServiceReferenciasMessageService.AppService
		/// </summary>
		public virtual MessageService MessageService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.AppServiceReferenciasMessageService.AppServiceDomainRoleId) as MessageService;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.AppServiceReferenciasMessageService.AppServiceDomainRoleId, value);
			}
		}
		#endregion
		#region Graphs opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Graphs.
		/// Descripción de Compañía.IotDsl.AppServiceHasGraph.AppService
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Graph> Graphs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Graph>, Graph>(global::Compañía.IotDsl.AppServiceHasGraph.AppServiceDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Compañía.IotDsl.Graph.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Compañía.IotDsl.Graph sourceGraph1 = sourceElement as global::Compañía.IotDsl.Graph;
			if (sourceGraph1 != null)
			{
				// Create link for path AppServiceHasGraph.Graphs
				this.Graphs.Add(sourceGraph1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Compañía.IotDsl.Graph sourceGraph1 = sourceElement as global::Compañía.IotDsl.Graph;
			if (sourceGraph1 != null)
			{
				// Delete link for path AppServiceHasGraph.Graphs
				
				foreach (DslModeling::ElementLink link in global::Compañía.IotDsl.AppServiceHasGraph.GetLinks((global::Compañía.IotDsl.AppService)this, sourceGraph1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Compañía.IotDsl.AppServiceHasGraph.AppServiceDomainRoleId, global::Compañía.IotDsl.AppServiceHasGraph.GraphDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass DataAnalytics
	/// Descripción de Compañía.IotDsl.DataAnalytics
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.DataAnalytics.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.DataAnalytics.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e7d26758-2494-4e9f-b4a0-9f5a007f5895")]
	public partial class DataAnalytics : CloudService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataAnalytics domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7d26758, 0x2494, 0x4e9f, 0xb4, 0xa0, 0x9f, 0x5a, 0x00, 0x7f, 0x58, 0x95);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataAnalytics(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataAnalytics(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Inputs opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Inputs.
		/// Descripción de Compañía.IotDsl.DataAnalyticsReferencesInput.DataAnalytics
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CloudService> Inputs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CloudService>, CloudService>(global::Compañía.IotDsl.DataAnalyticsReferencesInput.DataAnalyticsDomainRoleId);
			}
		}
		#endregion
		#region Outputs opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Outputs.
		/// Descripción de Compañía.IotDsl.DataAnalyticsReferencesOutput.DataAnalytics
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CloudService> Outputs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CloudService>, CloudService>(global::Compañía.IotDsl.DataAnalyticsReferencesOutput.DataAnalyticsDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass WebApp
	/// Descripción de Compañía.IotDsl.WebApp
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.WebApp.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.WebApp.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("51c0ccf0-8769-49bf-9d3f-5c987ad5bd6c")]
	public partial class WebApp : AppService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// WebApp domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x51c0ccf0, 0x8769, 0x49bf, 0x9d, 0x3f, 0x5c, 0x98, 0x7a, 0xd5, 0xbd, 0x6c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WebApp(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WebApp(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass ApiREST
	/// Descripción de Compañía.IotDsl.ApiREST
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ApiREST.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ApiREST.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("12a5c9f6-f6c7-46fe-9242-e11f4b230f9f")]
	public partial class ApiREST : AppService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ApiREST domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12a5c9f6, 0xf6c7, 0x46fe, 0x92, 0x42, 0xe1, 0x1f, 0x4b, 0x23, 0x0f, 0x9f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApiREST(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ApiREST(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass PhoneApp
	/// Descripción de Compañía.IotDsl.PhoneApp
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.PhoneApp.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.PhoneApp.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ba1d7527-3a39-47c9-be08-693f10eecaa0")]
	public partial class PhoneApp : AppService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PhoneApp domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba1d7527, 0x3a39, 0x47c9, 0xbe, 0x08, 0x69, 0x3f, 0x10, 0xee, 0xca, 0xa0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PhoneApp(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PhoneApp(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass Device
	/// Descripción de Compañía.IotDsl.Device
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.Device.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.Device.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (deviceId = {deviceIdPropertyStorage})")]
	[DslModeling::DomainObjectId("85bf6ae4-96ce-46a1-b03e-7ab9c9514889")]
	public partial class Device : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Device domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x85bf6ae4, 0x96ce, 0x46a1, 0xb0, 0x3e, 0x7a, 0xb9, 0xc9, 0x51, 0x48, 0x89);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Device(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region deviceId domain property code
		
		/// <summary>
		/// deviceId domain property Id.
		/// </summary>
		public static readonly global::System.Guid deviceIdDomainPropertyId = new global::System.Guid(0x9c219967, 0xf5c9, 0x4bc1, 0x8c, 0x6a, 0xd5, 0x11, 0x83, 0xee, 0x7d, 0x64);
		
		/// <summary>
		/// Storage for deviceId
		/// </summary>
		private global::System.String deviceIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of deviceId domain property.
		/// Descripción de Compañía.IotDsl.Device.Device Id
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.Device/deviceId.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.Device/deviceId.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9c219967-f5c9-4bc1-8c6a-d51183ee7d64")]
		public global::System.String deviceId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return deviceIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				deviceIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.deviceId domain property.
		/// </summary>
		internal sealed partial class deviceIdPropertyHandler : DslModeling::DomainPropertyValueHandler<Device, global::System.String>
		{
			private deviceIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.deviceId domain property value handler.
			/// </summary>
			public static readonly deviceIdPropertyHandler Instance = new deviceIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.deviceId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return deviceIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.deviceIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.deviceIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Protocol domain property code
		
		/// <summary>
		/// Protocol domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProtocolDomainPropertyId = new global::System.Guid(0x6d659ce4, 0xbab3, 0x461d, 0x83, 0x70, 0x90, 0x05, 0x42, 0xce, 0x15, 0x7a);
		
		/// <summary>
		/// Storage for Protocol
		/// </summary>
		private Protocol protocolPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Protocol domain property.
		/// Descripción de Compañía.IotDsl.Device.Protocol
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.Device/Protocol.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.Device/Protocol.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6d659ce4-bab3-461d-8370-900542ce157a")]
		public Protocol Protocol
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return protocolPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProtocolPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.Protocol domain property.
		/// </summary>
		internal sealed partial class ProtocolPropertyHandler : DslModeling::DomainPropertyValueHandler<Device, Protocol>
		{
			private ProtocolPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.Protocol domain property value handler.
			/// </summary>
			public static readonly ProtocolPropertyHandler Instance = new ProtocolPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.Protocol domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProtocolDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Protocol GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.protocolPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, Protocol newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Protocol oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.protocolPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OS domain property code
		
		/// <summary>
		/// OS domain property Id.
		/// </summary>
		public static readonly global::System.Guid OSDomainPropertyId = new global::System.Guid(0xe59dcaa8, 0xab55, 0x4939, 0x9d, 0xc6, 0x01, 0x74, 0x6c, 0x34, 0x28, 0x74);
		
		/// <summary>
		/// Storage for OS
		/// </summary>
		private OS oSPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of OS domain property.
		/// Descripción de Compañía.IotDsl.Device.OS
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.Device/OS.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.Device/OS.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e59dcaa8-ab55-4939-9dc6-01746c342874")]
		public OS OS
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return oSPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OSPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.OS domain property.
		/// </summary>
		internal sealed partial class OSPropertyHandler : DslModeling::DomainPropertyValueHandler<Device, OS>
		{
			private OSPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.OS domain property value handler.
			/// </summary>
			public static readonly OSPropertyHandler Instance = new OSPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.OS domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OSDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed OS GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.oSPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, OS newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				OS oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.oSPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProgrammingLenguage domain property code
		
		/// <summary>
		/// ProgrammingLenguage domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProgrammingLenguageDomainPropertyId = new global::System.Guid(0xf0e6e762, 0x9d83, 0x415a, 0xb4, 0x44, 0x4a, 0x13, 0xa8, 0x3b, 0x32, 0x58);
		
		/// <summary>
		/// Storage for ProgrammingLenguage
		/// </summary>
		private ProgramingLenguage programmingLenguagePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ProgrammingLenguage domain property.
		/// Descripción de Compañía.IotDsl.Device.Programming Lenguage
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.Device/ProgrammingLenguage.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.Device/ProgrammingLenguage.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f0e6e762-9d83-415a-b444-4a13a83b3258")]
		public ProgramingLenguage ProgrammingLenguage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return programmingLenguagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProgrammingLenguagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Device.ProgrammingLenguage domain property.
		/// </summary>
		internal sealed partial class ProgrammingLenguagePropertyHandler : DslModeling::DomainPropertyValueHandler<Device, ProgramingLenguage>
		{
			private ProgrammingLenguagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Device.ProgrammingLenguage domain property value handler.
			/// </summary>
			public static readonly ProgrammingLenguagePropertyHandler Instance = new ProgrammingLenguagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Device.ProgrammingLenguage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProgrammingLenguageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ProgramingLenguage GetValue(Device element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.programmingLenguagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Device element, ProgramingLenguage newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ProgramingLenguage oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.programmingLenguagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoTDsl opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTDsl.
		/// Descripción de Compañía.IotDsl.IoTDslHasDevices.Device
		/// </summary>
		public virtual IoTDsl IoTDsl
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.IoTDslHasDevices.DeviceDomainRoleId) as IoTDsl;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.IoTDslHasDevices.DeviceDomainRoleId, value);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// Descripción de Compañía.IotDsl.DeviceReferenciasSensors.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensor> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensor>, Sensor>(global::Compañía.IotDsl.DeviceReferenciasSensors.DeviceDomainRoleId);
			}
		}
		#endregion
		#region IoTCenters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IoTCenters.
		/// Descripción de Compañía.IotDsl.IoTCenterHasDevices.Device
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IoTCenter> IoTCenters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IoTCenter>, IoTCenter>(global::Compañía.IotDsl.IoTCenterHasDevices.DeviceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass RaspberryPi
	/// Descripción de Compañía.IotDsl.RaspberryPi
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.RaspberryPi.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.RaspberryPi.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f9c09a69-49f7-4866-86e5-c8a0e2ffc0e4")]
	public partial class RaspberryPi : Device
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RaspberryPi domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf9c09a69, 0x49f7, 0x4866, 0x86, 0xe5, 0xc8, 0xa0, 0xe2, 0xff, 0xc0, 0xe4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RaspberryPi(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RaspberryPi(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass Sensor
	/// Descripción de Compañía.IotDsl.Sensor
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.Sensor.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.Sensor.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("917b6845-e78e-4ec5-97d3-953bf1856678")]
	public partial class Sensor : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x917b6845, 0xe78e, 0x4ec5, 0x97, 0xd3, 0x95, 0x3b, 0xf1, 0x85, 0x66, 0x78);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RefreshRate domain property code
		
		/// <summary>
		/// RefreshRate domain property Id.
		/// </summary>
		public static readonly global::System.Guid RefreshRateDomainPropertyId = new global::System.Guid(0xb1bc07e4, 0xade2, 0x489d, 0x9b, 0x5c, 0x6c, 0x36, 0xc6, 0xf8, 0x4a, 0xe9);
		
		/// <summary>
		/// Storage for RefreshRate
		/// </summary>
		private global::System.Int16 refreshRatePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RefreshRate domain property.
		/// Refresh rate of the sensors in miliseconds
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.Sensor/RefreshRate.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.Sensor/RefreshRate.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b1bc07e4-ade2-489d-9b5c-6c36c6f84ae9")]
		public global::System.Int16 RefreshRate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return refreshRatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RefreshRatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.RefreshRate domain property.
		/// </summary>
		internal sealed partial class RefreshRatePropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.Int16>
		{
			private RefreshRatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.RefreshRate domain property value handler.
			/// </summary>
			public static readonly RefreshRatePropertyHandler Instance = new RefreshRatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.RefreshRate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RefreshRateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.refreshRatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.refreshRatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SensorId domain property code
		
		/// <summary>
		/// SensorId domain property Id.
		/// </summary>
		public static readonly global::System.Guid SensorIdDomainPropertyId = new global::System.Guid(0x5a019f39, 0xb3a6, 0x472b, 0x93, 0xf0, 0x6c, 0xa4, 0x2a, 0xe9, 0x0d, 0x4b);
		
		/// <summary>
		/// Storage for SensorId
		/// </summary>
		private global::System.String sensorIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SensorId domain property.
		/// Descripción de Compañía.IotDsl.Sensor.Sensor Id
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.Sensor/SensorId.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.Sensor/SensorId.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5a019f39-b3a6-472b-93f0-6ca42ae90d4b")]
		public global::System.String SensorId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sensorIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SensorIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Sensor.SensorId domain property.
		/// </summary>
		internal sealed partial class SensorIdPropertyHandler : DslModeling::DomainPropertyValueHandler<Sensor, global::System.String>
		{
			private SensorIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Sensor.SensorId domain property value handler.
			/// </summary>
			public static readonly SensorIdPropertyHandler Instance = new SensorIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Sensor.SensorId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SensorIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Sensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sensorIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Sensor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sensorIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IoTDsl opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTDsl.
		/// Descripción de Compañía.IotDsl.IoTDslTieneSensors.Sensor
		/// </summary>
		public virtual IoTDsl IoTDsl
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.IoTDslTieneSensors.SensorDomainRoleId) as IoTDsl;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.IoTDslTieneSensors.SensorDomainRoleId, value);
			}
		}
		#endregion
		#region Device opposite domain role accessor
		/// <summary>
		/// Gets or sets Device.
		/// Descripción de Compañía.IotDsl.DeviceReferenciasSensors.Sensor
		/// </summary>
		public virtual Device Device
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.DeviceReferenciasSensors.SensorDomainRoleId) as Device;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.DeviceReferenciasSensors.SensorDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass BME280
	/// Descripción de Compañía.IotDsl.BME280
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.BME280.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.BME280.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c152aa52-1a11-4e5d-9a70-dd7fbf388809")]
	public partial class BME280 : Sensor
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BME280 domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc152aa52, 0x1a11, 0x4e5d, 0x9a, 0x70, 0xdd, 0x7f, 0xbf, 0x38, 0x88, 0x09);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BME280(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BME280(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Temperature domain property code
		
		/// <summary>
		/// Temperature domain property Id.
		/// </summary>
		public static readonly global::System.Guid TemperatureDomainPropertyId = new global::System.Guid(0x5fbb4d8f, 0x5788, 0x4abb, 0xaa, 0x03, 0xb3, 0xcd, 0x29, 0x0f, 0x57, 0xf1);
		
		/// <summary>
		/// Storage for Temperature
		/// </summary>
		private global::System.Boolean temperaturePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Temperature domain property.
		/// Descripción de Compañía.IotDsl.BME280.Temperature
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.BME280/Temperature.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.BME280/Temperature.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("5fbb4d8f-5788-4abb-aa03-b3cd290f57f1")]
		public global::System.Boolean Temperature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return temperaturePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TemperaturePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BME280.Temperature domain property.
		/// </summary>
		internal sealed partial class TemperaturePropertyHandler : DslModeling::DomainPropertyValueHandler<BME280, global::System.Boolean>
		{
			private TemperaturePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BME280.Temperature domain property value handler.
			/// </summary>
			public static readonly TemperaturePropertyHandler Instance = new TemperaturePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BME280.Temperature domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TemperatureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(BME280 element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.temperaturePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BME280 element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.temperaturePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Humidity domain property code
		
		/// <summary>
		/// Humidity domain property Id.
		/// </summary>
		public static readonly global::System.Guid HumidityDomainPropertyId = new global::System.Guid(0xd2446a43, 0x7d9d, 0x4795, 0x8d, 0xba, 0xa6, 0xf3, 0xa7, 0x40, 0x51, 0xab);
		
		/// <summary>
		/// Storage for Humidity
		/// </summary>
		private global::System.Boolean humidityPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Humidity domain property.
		/// Descripción de Compañía.IotDsl.BME280.Humidity
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.BME280/Humidity.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.BME280/Humidity.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("d2446a43-7d9d-4795-8dba-a6f3a74051ab")]
		public global::System.Boolean Humidity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return humidityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HumidityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BME280.Humidity domain property.
		/// </summary>
		internal sealed partial class HumidityPropertyHandler : DslModeling::DomainPropertyValueHandler<BME280, global::System.Boolean>
		{
			private HumidityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BME280.Humidity domain property value handler.
			/// </summary>
			public static readonly HumidityPropertyHandler Instance = new HumidityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BME280.Humidity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HumidityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(BME280 element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.humidityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BME280 element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.humidityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pressure domain property code
		
		/// <summary>
		/// Pressure domain property Id.
		/// </summary>
		public static readonly global::System.Guid PressureDomainPropertyId = new global::System.Guid(0x2ea0d366, 0x6a89, 0x4135, 0xb8, 0x01, 0x19, 0x7c, 0x13, 0x73, 0x5e, 0x60);
		
		/// <summary>
		/// Storage for Pressure
		/// </summary>
		private global::System.Boolean pressurePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Pressure domain property.
		/// Descripción de Compañía.IotDsl.BME280.Pressure
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.BME280/Pressure.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.BME280/Pressure.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("2ea0d366-6a89-4135-b801-197c13735e60")]
		public global::System.Boolean Pressure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pressurePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PressurePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BME280.Pressure domain property.
		/// </summary>
		internal sealed partial class PressurePropertyHandler : DslModeling::DomainPropertyValueHandler<BME280, global::System.Boolean>
		{
			private PressurePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BME280.Pressure domain property value handler.
			/// </summary>
			public static readonly PressurePropertyHandler Instance = new PressurePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BME280.Pressure domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PressureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(BME280 element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pressurePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BME280 element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pressurePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Altitude domain property code
		
		/// <summary>
		/// Altitude domain property Id.
		/// </summary>
		public static readonly global::System.Guid AltitudeDomainPropertyId = new global::System.Guid(0xd0173bb2, 0xdf06, 0x4130, 0x81, 0xf9, 0xa5, 0x66, 0x96, 0x66, 0xdc, 0xef);
		
		/// <summary>
		/// Storage for Altitude
		/// </summary>
		private global::System.Boolean altitudePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Altitude domain property.
		/// Descripción de Compañía.IotDsl.BME280.Altitude
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.BME280/Altitude.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.BME280/Altitude.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("d0173bb2-df06-4130-81f9-a5669666dcef")]
		public global::System.Boolean Altitude
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return altitudePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AltitudePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BME280.Altitude domain property.
		/// </summary>
		internal sealed partial class AltitudePropertyHandler : DslModeling::DomainPropertyValueHandler<BME280, global::System.Boolean>
		{
			private AltitudePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BME280.Altitude domain property value handler.
			/// </summary>
			public static readonly AltitudePropertyHandler Instance = new AltitudePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BME280.Altitude domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AltitudeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(BME280 element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.altitudePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BME280 element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.altitudePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass MessageService
	/// Descripción de Compañía.IotDsl.MessageService
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.MessageService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.MessageService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ced8a559-94bb-4ad3-90f0-ac386cd86054")]
	public partial class MessageService : CloudService
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MessageService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xced8a559, 0x94bb, 0x4ad3, 0x90, 0xf0, 0xac, 0x38, 0x6c, 0xd8, 0x60, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MessageService(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MessageService(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AppService opposite domain role accessor
		/// <summary>
		/// Gets or sets AppService.
		/// Descripción de
		/// Compañía.IotDsl.AppServiceReferenciasMessageService.MessageService
		/// </summary>
		public virtual AppService AppService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.AppServiceReferenciasMessageService.MessageServiceDomainRoleId) as AppService;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.AppServiceReferenciasMessageService.MessageServiceDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass Graph
	/// Descripción de Compañía.IotDsl.Graph
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.Graph.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.Graph.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fddf178d-ea46-48d0-9be4-cec1bd26c822")]
	public partial class Graph : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Graph domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfddf178d, 0xea46, 0x48d0, 0x9b, 0xe4, 0xce, 0xc1, 0xbd, 0x26, 0xc8, 0x22);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Graph(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Graph(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AppService opposite domain role accessor
		/// <summary>
		/// Gets or sets AppService.
		/// Descripción de Compañía.IotDsl.AppServiceHasGraph.Graph
		/// </summary>
		public virtual AppService AppService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.AppServiceHasGraph.GraphDomainRoleId) as AppService;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.AppServiceHasGraph.GraphDomainRoleId, value);
			}
		}
		#endregion
		#region Variables opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Variables.
		/// Descripción de Compañía.IotDsl.GraphHasVariables.Graph
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Variable> Variables
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Variable>, Variable>(global::Compañía.IotDsl.GraphHasVariables.GraphDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Compañía.IotDsl.Variable.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Compañía.IotDsl.Variable sourceVariable1 = sourceElement as global::Compañía.IotDsl.Variable;
			if (sourceVariable1 != null)
			{
				// Create link for path GraphHasVariables.Variables
				this.Variables.Add(sourceVariable1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Compañía.IotDsl.Variable sourceVariable1 = sourceElement as global::Compañía.IotDsl.Variable;
			if (sourceVariable1 != null)
			{
				// Delete link for path GraphHasVariables.Variables
				
				foreach (DslModeling::ElementLink link in global::Compañía.IotDsl.GraphHasVariables.GetLinks((global::Compañía.IotDsl.Graph)this, sourceVariable1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Compañía.IotDsl.GraphHasVariables.GraphDomainRoleId, global::Compañía.IotDsl.GraphHasVariables.VariableDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass LineGraph
	/// Descripción de Compañía.IotDsl.LineGraph
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.LineGraph.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.LineGraph.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4b6c57c0-30f7-4b36-b26c-170ac8698d6f")]
	public partial class LineGraph : Graph
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LineGraph domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4b6c57c0, 0x30f7, 0x4b36, 0xb2, 0x6c, 0x17, 0x0a, 0xc8, 0x69, 0x8d, 0x6f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LineGraph(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LineGraph(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainClass Variable
	/// Descripción de Compañía.IotDsl.Variable
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.Variable.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.Variable.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6acd3ab5-abc9-421d-8990-61e00064a307")]
	public partial class Variable : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Variable domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6acd3ab5, 0xabc9, 0x421d, 0x89, 0x90, 0x61, 0xe0, 0x00, 0x64, 0xa3, 0x07);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Variable(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Variable(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x844f4254, 0x925f, 0x41d9, 0x91, 0xf0, 0x3d, 0xa4, 0x97, 0x42, 0x20, 0x97);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private Measurements typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Descripción de Compañía.IotDsl.Variable.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.Variable/Type.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.Variable/Type.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("844f4254-925f-41d9-91f0-3da497422097")]
		public Measurements Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Variable.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Variable, Measurements>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Variable.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Variable.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Measurements GetValue(Variable element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Variable element, Measurements newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Measurements oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Graph opposite domain role accessor
		/// <summary>
		/// Gets or sets Graph.
		/// Descripción de Compañía.IotDsl.GraphHasVariables.Variable
		/// </summary>
		public virtual Graph Graph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Compañía.IotDsl.GraphHasVariables.VariableDomainRoleId) as Graph;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Compañía.IotDsl.GraphHasVariables.VariableDomainRoleId, value);
			}
		}
		#endregion
	}
}
