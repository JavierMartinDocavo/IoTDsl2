//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship IotDsl1TieneResourceGroup
	/// Descripción de Compañía.IotDsl.IotDsl1TieneResourceGroup
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.IotDsl1TieneResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.IotDsl1TieneResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7aafb2c6-a999-48dd-a91d-5dd686b2a897")]
	public partial class IotDsl1TieneResourceGroup : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IotDsl1TieneResourceGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7aafb2c6, 0xa999, 0x48dd, 0xa9, 0x1d, 0x5d, 0xd6, 0x86, 0xb2, 0xa8, 0x97);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IotDsl1TieneResourceGroup link in the same Partition as the given IotDsl1
		/// </summary>
		/// <param name="source">IotDsl1 to use as the source of the relationship.</param>
		/// <param name="target">ResourceGroup to use as the target of the relationship.</param>
		public IotDsl1TieneResourceGroup(IotDsl1 source, ResourceGroup target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IotDsl1TieneResourceGroup.IotDsl1DomainRoleId, source), new DslModeling::RoleAssignment(IotDsl1TieneResourceGroup.ResourceGroupDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IotDsl1 domain role code
		
		/// <summary>
		/// IotDsl1 domain role Id.
		/// </summary>
		public static readonly global::System.Guid IotDsl1DomainRoleId = new global::System.Guid(0x4ed6059c, 0x41c7, 0x41fc, 0x83, 0x26, 0x59, 0xd6, 0x32, 0x71, 0x35, 0x1a);
		
		/// <summary>
		/// DomainRole IotDsl1
		/// Descripción de Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/IotDsl1.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/IotDsl1.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.IotDsl1TieneResourceGroup/IotDsl1.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4ed6059c-41c7-41fc-8326-59d63271351a")]
		public virtual IotDsl1 IotDsl1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IotDsl1)DslModeling::DomainRoleInfo.GetRolePlayer(this, IotDsl1DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IotDsl1DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IotDsl1 of a ResourceGroup
		/// <summary>
		/// Gets IotDsl1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IotDsl1 GetIotDsl1(ResourceGroup element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ResourceGroupDomainRoleId) as IotDsl1;
		}
		
		/// <summary>
		/// Sets IotDsl1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIotDsl1(ResourceGroup element, IotDsl1 newIotDsl1)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ResourceGroupDomainRoleId, newIotDsl1);
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0x7b3da52c, 0x33aa, 0x44e4, 0x99, 0x81, 0x12, 0x42, 0xc4, 0xed, 0xba, 0x84);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.IotDsl1TieneResourceGroup.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IotDsl1", PropertyDisplayNameKey="Compañía.IotDsl.IotDsl1TieneResourceGroup/ResourceGroup.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7b3da52c-33aa-44e4-9981-1242c4edba84")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a IotDsl1
		/// <summary>
		/// Gets a list of ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ResourceGroup> GetResourceGroup(IotDsl1 element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ResourceGroup>, ResourceGroup>(element, IotDsl1DomainRoleId);
		}
		#endregion
		#region IotDsl1 link accessor
		/// <summary>
		/// Get the list of IotDsl1TieneResourceGroup links to a IotDsl1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> GetLinksToResourceGroup ( global::Compañía.IotDsl.IotDsl1 iotDsl1Instance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(iotDsl1Instance, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1DomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the IotDsl1TieneResourceGroup link to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IotDsl1TieneResourceGroup GetLinkToIotDsl1 (global::Compañía.IotDsl.ResourceGroup resourceGroupInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(resourceGroupInstance, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.ResourceGroupDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ResourceGroup not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IotDsl1TieneResourceGroup instance accessors
		
		/// <summary>
		/// Get any IotDsl1TieneResourceGroup links between a given IotDsl1 and a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> GetLinks( global::Compañía.IotDsl.IotDsl1 source, global::Compañía.IotDsl.ResourceGroup target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(source, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1DomainRoleId);
			foreach ( global::Compañía.IotDsl.IotDsl1TieneResourceGroup link in links )
			{
				if ( target.Equals(link.ResourceGroup) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IotDsl1TieneResourceGroup link between a given IotDsl1and a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IotDsl1TieneResourceGroup GetLink( global::Compañía.IotDsl.IotDsl1 source, global::Compañía.IotDsl.ResourceGroup target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(source, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1DomainRoleId);
			foreach ( global::Compañía.IotDsl.IotDsl1TieneResourceGroup link in links )
			{
				if ( target.Equals(link.ResourceGroup) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneIoTCenter
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneIoTCenter
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("79b8c6cc-0624-4c3c-99cd-5a168a6c9ca3")]
	public partial class ResourceGroupTieneIoTCenter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneIoTCenter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x79b8c6cc, 0x0624, 0x4c3c, 0x99, 0xcd, 0x5a, 0x16, 0x8a, 0x6c, 0x9c, 0xa3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneIoTCenter link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">IoTCenter to use as the target of the relationship.</param>
		public ResourceGroupTieneIoTCenter(ResourceGroup source, IoTCenter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneIoTCenter.IoTCenterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0xd724805d, 0xc88b, 0x4354, 0xbf, 0x67, 0x33, 0x3d, 0xbf, 0x57, 0x3a, 0x61);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IoTCenter", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneIoTCenter/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d724805d-c88b-4354-bf67-333dbf573a61")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a IoTCenter
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(IoTCenter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IoTCenterDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(IoTCenter element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IoTCenterDomainRoleId, newResourceGroup);
		}
		#endregion
		#region IoTCenter domain role code
		
		/// <summary>
		/// IoTCenter domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTCenterDomainRoleId = new global::System.Guid(0x8bce4ddb, 0x3934, 0x4e00, 0x98, 0xff, 0xba, 0x4e, 0x62, 0x90, 0x84, 0xc9);
		
		/// <summary>
		/// DomainRole IoTCenter
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneIoTCenter.IoTCenter
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/IoTCenter.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/IoTCenter.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneIoTCenter/IoTCenter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8bce4ddb-3934-4e00-98ff-ba4e629084c9")]
		public virtual IoTCenter IoTCenter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTCenter)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTCenterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTCenterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTCenter of a ResourceGroup
		/// <summary>
		/// Gets a list of IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IoTCenter> GetIoTCenter(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IoTCenter>, IoTCenter>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneIoTCenter links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> GetLinksToIoTCenter ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId);
		}
		#endregion
		#region IoTCenter link accessor
		/// <summary>
		/// Get the ResourceGroupTieneIoTCenter link to a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneIoTCenter GetLinkToResourceGroup (global::Compañía.IotDsl.IoTCenter ioTCenterInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(ioTCenterInstance, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.IoTCenterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IoTCenter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneIoTCenter instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneIoTCenter links between a given ResourceGroup and a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.IoTCenter target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(source, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneIoTCenter link in links )
			{
				if ( target.Equals(link.IoTCenter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneIoTCenter link between a given ResourceGroupand a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneIoTCenter GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.IoTCenter target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(source, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneIoTCenter link in links )
			{
				if ( target.Equals(link.IoTCenter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneEndpoint
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneEndpoint
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneEndpoint.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneEndpoint.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dda76118-cfc4-45ab-abc3-2453f2962565")]
	public partial class ResourceGroupTieneEndpoint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneEndpoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdda76118, 0xcfc4, 0x45ab, 0xab, 0xc3, 0x24, 0x53, 0xf2, 0x96, 0x25, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneEndpoint link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">Endpoint to use as the target of the relationship.</param>
		public ResourceGroupTieneEndpoint(ResourceGroup source, Endpoint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneEndpoint.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneEndpoint.EndpointDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneEndpoint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneEndpoint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneEndpoint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneEndpoint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0x8bc53bdd, 0x9669, 0x433d, 0xb0, 0x8e, 0x87, 0xff, 0x7c, 0x84, 0x06, 0x65);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneEndpoint.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneEndpoint/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneEndpoint/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Endpoint", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneEndpoint/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8bc53bdd-9669-433d-b08e-87ff7c840665")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a Endpoint
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(Endpoint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndpointDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(Endpoint element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndpointDomainRoleId, newResourceGroup);
		}
		#endregion
		#region Endpoint domain role code
		
		/// <summary>
		/// Endpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointDomainRoleId = new global::System.Guid(0x74ee8cdb, 0x93ff, 0x42f6, 0xa8, 0x3c, 0x9d, 0xec, 0x62, 0xa6, 0x42, 0x67);
		
		/// <summary>
		/// DomainRole Endpoint
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneEndpoint.Endpoint
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneEndpoint/Endpoint.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneEndpoint/Endpoint.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneEndpoint/Endpoint.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("74ee8cdb-93ff-42f6-a83c-9dec62a64267")]
		public virtual Endpoint Endpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoint of a ResourceGroup
		/// <summary>
		/// Gets a list of Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Endpoint> GetEndpoint(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoint>, Endpoint>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneEndpoint links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneEndpoint> GetLinksToEndpoint ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoint>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneEndpoint.ResourceGroupDomainRoleId);
		}
		#endregion
		#region Endpoint link accessor
		/// <summary>
		/// Get the ResourceGroupTieneEndpoint link to a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneEndpoint GetLinkToResourceGroup (global::Compañía.IotDsl.Endpoint endpointInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoint>(endpointInstance, global::Compañía.IotDsl.ResourceGroupTieneEndpoint.EndpointDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Endpoint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneEndpoint instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneEndpoint links between a given ResourceGroup and a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneEndpoint> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.Endpoint target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneEndpoint> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneEndpoint>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoint>(source, global::Compañía.IotDsl.ResourceGroupTieneEndpoint.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneEndpoint link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneEndpoint link between a given ResourceGroupand a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneEndpoint GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.Endpoint target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoint>(source, global::Compañía.IotDsl.ResourceGroupTieneEndpoint.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneEndpoint link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship IoTCenterReferenciasEndpoint
	/// Descripción de Compañía.IotDsl.IoTCenterReferenciasEndpoint
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTCenterReferenciasEndpoint.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.IoTCenterReferenciasEndpoint.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e09bf60c-aa20-45e9-850e-2b974bf05aa4")]
	public partial class IoTCenterReferenciasEndpoint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTCenterReferenciasEndpoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe09bf60c, 0xaa20, 0x45e9, 0x85, 0x0e, 0x2b, 0x97, 0x4b, 0xf0, 0x5a, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTCenterReferenciasEndpoint link in the same Partition as the given IoTCenter
		/// </summary>
		/// <param name="source">IoTCenter to use as the source of the relationship.</param>
		/// <param name="target">Endpoint to use as the target of the relationship.</param>
		public IoTCenterReferenciasEndpoint(IoTCenter source, Endpoint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTCenterReferenciasEndpoint.IoTCenterDomainRoleId, source), new DslModeling::RoleAssignment(IoTCenterReferenciasEndpoint.EndpointDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTCenterReferenciasEndpoint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTCenterReferenciasEndpoint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTCenterReferenciasEndpoint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTCenterReferenciasEndpoint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTCenter domain role code
		
		/// <summary>
		/// IoTCenter domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTCenterDomainRoleId = new global::System.Guid(0xd5fb9485, 0x7cbe, 0x420a, 0x9a, 0x22, 0x89, 0xac, 0xf0, 0x26, 0x7f, 0xda);
		
		/// <summary>
		/// DomainRole IoTCenter
		/// Descripción de Compañía.IotDsl.IoTCenterReferenciasEndpoint.IoTCenter
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTCenterReferenciasEndpoint/IoTCenter.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IoTCenterReferenciasEndpoint/IoTCenter.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Endpoint", PropertyDisplayNameKey="Compañía.IotDsl.IoTCenterReferenciasEndpoint/IoTCenter.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d5fb9485-7cbe-420a-9a22-89acf0267fda")]
		public virtual IoTCenter IoTCenter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTCenter)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTCenterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTCenterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTCenter of a Endpoint
		/// <summary>
		/// Gets IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTCenter GetIoTCenter(Endpoint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndpointDomainRoleId) as IoTCenter;
		}
		
		/// <summary>
		/// Sets IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTCenter(Endpoint element, IoTCenter newIoTCenter)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndpointDomainRoleId, newIoTCenter);
		}
		#endregion
		#region Endpoint domain role code
		
		/// <summary>
		/// Endpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointDomainRoleId = new global::System.Guid(0x2656a986, 0xefce, 0x4f91, 0x96, 0xff, 0x9d, 0x23, 0xe2, 0xe4, 0x91, 0x95);
		
		/// <summary>
		/// DomainRole Endpoint
		/// Descripción de Compañía.IotDsl.IoTCenterReferenciasEndpoint.Endpoint
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTCenterReferenciasEndpoint/Endpoint.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IoTCenterReferenciasEndpoint/Endpoint.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTCenter", PropertyDisplayNameKey="Compañía.IotDsl.IoTCenterReferenciasEndpoint/Endpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2656a986-efce-4f91-96ff-9d23e2e49195")]
		public virtual Endpoint Endpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoint of a IoTCenter
		/// <summary>
		/// Gets a list of Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Endpoint> GetEndpoint(IoTCenter element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoint>, Endpoint>(element, IoTCenterDomainRoleId);
		}
		#endregion
		#region IoTCenter link accessor
		/// <summary>
		/// Get the list of IoTCenterReferenciasEndpoint links to a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint> GetLinksToEndpoint ( global::Compañía.IotDsl.IoTCenter ioTCenterInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint>(ioTCenterInstance, global::Compañía.IotDsl.IoTCenterReferenciasEndpoint.IoTCenterDomainRoleId);
		}
		#endregion
		#region Endpoint link accessor
		/// <summary>
		/// Get the IoTCenterReferenciasEndpoint link to a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IoTCenterReferenciasEndpoint GetLinkToIoTCenter (global::Compañía.IotDsl.Endpoint endpointInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint>(endpointInstance, global::Compañía.IotDsl.IoTCenterReferenciasEndpoint.EndpointDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Endpoint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTCenterReferenciasEndpoint instance accessors
		
		/// <summary>
		/// Get any IoTCenterReferenciasEndpoint links between a given IoTCenter and a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint> GetLinks( global::Compañía.IotDsl.IoTCenter source, global::Compañía.IotDsl.Endpoint target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint>(source, global::Compañía.IotDsl.IoTCenterReferenciasEndpoint.IoTCenterDomainRoleId);
			foreach ( global::Compañía.IotDsl.IoTCenterReferenciasEndpoint link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTCenterReferenciasEndpoint link between a given IoTCenterand a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IoTCenterReferenciasEndpoint GetLink( global::Compañía.IotDsl.IoTCenter source, global::Compañía.IotDsl.Endpoint target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoint>(source, global::Compañía.IotDsl.IoTCenterReferenciasEndpoint.IoTCenterDomainRoleId);
			foreach ( global::Compañía.IotDsl.IoTCenterReferenciasEndpoint link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneCloudService
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneCloudService
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneCloudService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneCloudService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c0540b71-30e1-4d69-9a47-12e985d750d1")]
	public partial class ResourceGroupTieneCloudService : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneCloudService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0540b71, 0x30e1, 0x4d69, 0x9a, 0x47, 0x12, 0xe9, 0x85, 0xd7, 0x50, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneCloudService link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">CloudService to use as the target of the relationship.</param>
		public ResourceGroupTieneCloudService(ResourceGroup source, CloudService target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneCloudService.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneCloudService.CloudServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneCloudService(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneCloudService(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneCloudService(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneCloudService(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0x7941d557, 0xc8b8, 0x4eb4, 0x8a, 0x4b, 0x1f, 0x34, 0x8e, 0xbf, 0x45, 0x46);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneCloudService.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneCloudService/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneCloudService/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CloudService", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneCloudService/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7941d557-c8b8-4eb4-8a4b-1f348ebf4546")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a CloudService
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(CloudService element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CloudServiceDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(CloudService element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CloudServiceDomainRoleId, newResourceGroup);
		}
		#endregion
		#region CloudService domain role code
		
		/// <summary>
		/// CloudService domain role Id.
		/// </summary>
		public static readonly global::System.Guid CloudServiceDomainRoleId = new global::System.Guid(0xe41e6e05, 0xb875, 0x4dd7, 0x94, 0xe7, 0xe4, 0xae, 0xeb, 0xd6, 0xb8, 0xba);
		
		/// <summary>
		/// DomainRole CloudService
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneCloudService.CloudService
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneCloudService/CloudService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneCloudService/CloudService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneCloudService/CloudService.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e41e6e05-b875-4dd7-94e7-e4aeebd6b8ba")]
		public virtual CloudService CloudService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CloudService)DslModeling::DomainRoleInfo.GetRolePlayer(this, CloudServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CloudServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CloudService of a ResourceGroup
		/// <summary>
		/// Gets a list of CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CloudService> GetCloudService(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CloudService>, CloudService>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneCloudService links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneCloudService> GetLinksToCloudService ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneCloudService>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneCloudService.ResourceGroupDomainRoleId);
		}
		#endregion
		#region CloudService link accessor
		/// <summary>
		/// Get the ResourceGroupTieneCloudService link to a CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneCloudService GetLinkToResourceGroup (global::Compañía.IotDsl.CloudService cloudServiceInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneCloudService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneCloudService>(cloudServiceInstance, global::Compañía.IotDsl.ResourceGroupTieneCloudService.CloudServiceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CloudService not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneCloudService instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneCloudService links between a given ResourceGroup and a CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneCloudService> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.CloudService target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneCloudService> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneCloudService>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneCloudService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneCloudService>(source, global::Compañía.IotDsl.ResourceGroupTieneCloudService.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneCloudService link in links )
			{
				if ( target.Equals(link.CloudService) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneCloudService link between a given ResourceGroupand a CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneCloudService GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.CloudService target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneCloudService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneCloudService>(source, global::Compañía.IotDsl.ResourceGroupTieneCloudService.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneCloudService link in links )
			{
				if ( target.Equals(link.CloudService) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship EndpointReferenciasCloudService
	/// Descripción de Compañía.IotDsl.EndpointReferenciasCloudService
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.EndpointReferenciasCloudService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.EndpointReferenciasCloudService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f1cf8f3d-6cf1-41e5-8b29-d637d48bd1a2")]
	public partial class EndpointReferenciasCloudService : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EndpointReferenciasCloudService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1cf8f3d, 0x6cf1, 0x41e5, 0x8b, 0x29, 0xd6, 0x37, 0xd4, 0x8b, 0xd1, 0xa2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EndpointReferenciasCloudService link in the same Partition as the given Endpoint
		/// </summary>
		/// <param name="source">Endpoint to use as the source of the relationship.</param>
		/// <param name="target">CloudService to use as the target of the relationship.</param>
		public EndpointReferenciasCloudService(Endpoint source, CloudService target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EndpointReferenciasCloudService.EndpointDomainRoleId, source), new DslModeling::RoleAssignment(EndpointReferenciasCloudService.CloudServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointReferenciasCloudService(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointReferenciasCloudService(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndpointReferenciasCloudService(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndpointReferenciasCloudService(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Endpoint domain role code
		
		/// <summary>
		/// Endpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointDomainRoleId = new global::System.Guid(0xe1def1a8, 0xcbca, 0x4509, 0x87, 0x6a, 0x57, 0x21, 0x02, 0x69, 0x7d, 0xee);
		
		/// <summary>
		/// DomainRole Endpoint
		/// Descripción de Compañía.IotDsl.EndpointReferenciasCloudService.Endpoint
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.EndpointReferenciasCloudService/Endpoint.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.EndpointReferenciasCloudService/Endpoint.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CloudService", PropertyDisplayNameKey="Compañía.IotDsl.EndpointReferenciasCloudService/Endpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e1def1a8-cbca-4509-876a-572102697dee")]
		public virtual Endpoint Endpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoint of a CloudService
		/// <summary>
		/// Gets a list of Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Endpoint> GetEndpoint(CloudService element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoint>, Endpoint>(element, CloudServiceDomainRoleId);
		}
		#endregion
		#region CloudService domain role code
		
		/// <summary>
		/// CloudService domain role Id.
		/// </summary>
		public static readonly global::System.Guid CloudServiceDomainRoleId = new global::System.Guid(0xc71c9d19, 0xc5e6, 0x48bc, 0xb3, 0xdc, 0x81, 0x7f, 0x34, 0x36, 0x8a, 0x51);
		
		/// <summary>
		/// DomainRole CloudService
		/// Descripción de Compañía.IotDsl.EndpointReferenciasCloudService.CloudService
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.EndpointReferenciasCloudService/CloudService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.EndpointReferenciasCloudService/CloudService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Endpoint", PropertyDisplayNameKey="Compañía.IotDsl.EndpointReferenciasCloudService/CloudService.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c71c9d19-c5e6-48bc-b3dc-817f34368a51")]
		public virtual CloudService CloudService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CloudService)DslModeling::DomainRoleInfo.GetRolePlayer(this, CloudServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CloudServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CloudService of a Endpoint
		/// <summary>
		/// Gets CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CloudService GetCloudService(Endpoint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndpointDomainRoleId) as CloudService;
		}
		
		/// <summary>
		/// Sets CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCloudService(Endpoint element, CloudService newCloudService)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndpointDomainRoleId, newCloudService);
		}
		#endregion
		#region Endpoint link accessor
		/// <summary>
		/// Get the EndpointReferenciasCloudService link to a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.EndpointReferenciasCloudService GetLinkToCloudService (global::Compañía.IotDsl.Endpoint endpointInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.EndpointReferenciasCloudService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.EndpointReferenciasCloudService>(endpointInstance, global::Compañía.IotDsl.EndpointReferenciasCloudService.EndpointDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Endpoint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CloudService link accessor
		/// <summary>
		/// Get the list of EndpointReferenciasCloudService links to a CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.EndpointReferenciasCloudService> GetLinksToEndpoint ( global::Compañía.IotDsl.CloudService cloudServiceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.EndpointReferenciasCloudService>(cloudServiceInstance, global::Compañía.IotDsl.EndpointReferenciasCloudService.CloudServiceDomainRoleId);
		}
		#endregion
		#region EndpointReferenciasCloudService instance accessors
		
		/// <summary>
		/// Get any EndpointReferenciasCloudService links between a given Endpoint and a CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.EndpointReferenciasCloudService> GetLinks( global::Compañía.IotDsl.Endpoint source, global::Compañía.IotDsl.CloudService target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.EndpointReferenciasCloudService> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.EndpointReferenciasCloudService>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.EndpointReferenciasCloudService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.EndpointReferenciasCloudService>(source, global::Compañía.IotDsl.EndpointReferenciasCloudService.EndpointDomainRoleId);
			foreach ( global::Compañía.IotDsl.EndpointReferenciasCloudService link in links )
			{
				if ( target.Equals(link.CloudService) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EndpointReferenciasCloudService link between a given Endpointand a CloudService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.EndpointReferenciasCloudService GetLink( global::Compañía.IotDsl.Endpoint source, global::Compañía.IotDsl.CloudService target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.EndpointReferenciasCloudService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.EndpointReferenciasCloudService>(source, global::Compañía.IotDsl.EndpointReferenciasCloudService.EndpointDomainRoleId);
			foreach ( global::Compañía.IotDsl.EndpointReferenciasCloudService link in links )
			{
				if ( target.Equals(link.CloudService) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
