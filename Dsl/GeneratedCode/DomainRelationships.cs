//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship IotDsl1TieneResourceGroup
	/// Descripción de Compañía.IotDsl.IotDsl1TieneResourceGroup
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.IotDsl1TieneResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.IotDsl1TieneResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7aafb2c6-a999-48dd-a91d-5dd686b2a897")]
	public partial class IotDsl1TieneResourceGroup : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IotDsl1TieneResourceGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7aafb2c6, 0xa999, 0x48dd, 0xa9, 0x1d, 0x5d, 0xd6, 0x86, 0xb2, 0xa8, 0x97);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IotDsl1TieneResourceGroup link in the same Partition as the given IotDsl1
		/// </summary>
		/// <param name="source">IotDsl1 to use as the source of the relationship.</param>
		/// <param name="target">ResourceGroup to use as the target of the relationship.</param>
		public IotDsl1TieneResourceGroup(IotDsl1 source, ResourceGroup target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IotDsl1TieneResourceGroup.IotDsl1DomainRoleId, source), new DslModeling::RoleAssignment(IotDsl1TieneResourceGroup.ResourceGroupDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IotDsl1TieneResourceGroup(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IotDsl1 domain role code
		
		/// <summary>
		/// IotDsl1 domain role Id.
		/// </summary>
		public static readonly global::System.Guid IotDsl1DomainRoleId = new global::System.Guid(0x4ed6059c, 0x41c7, 0x41fc, 0x83, 0x26, 0x59, 0xd6, 0x32, 0x71, 0x35, 0x1a);
		
		/// <summary>
		/// DomainRole IotDsl1
		/// Descripción de Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/IotDsl1.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/IotDsl1.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.IotDsl1TieneResourceGroup/IotDsl1.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4ed6059c-41c7-41fc-8326-59d63271351a")]
		public virtual IotDsl1 IotDsl1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IotDsl1)DslModeling::DomainRoleInfo.GetRolePlayer(this, IotDsl1DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IotDsl1DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IotDsl1 of a ResourceGroup
		/// <summary>
		/// Gets IotDsl1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IotDsl1 GetIotDsl1(ResourceGroup element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ResourceGroupDomainRoleId) as IotDsl1;
		}
		
		/// <summary>
		/// Sets IotDsl1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIotDsl1(ResourceGroup element, IotDsl1 newIotDsl1)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ResourceGroupDomainRoleId, newIotDsl1);
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0x7b3da52c, 0x33aa, 0x44e4, 0x99, 0x81, 0x12, 0x42, 0xc4, 0xed, 0xba, 0x84);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.IotDsl1TieneResourceGroup.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IotDsl1TieneResourceGroup/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IotDsl1", PropertyDisplayNameKey="Compañía.IotDsl.IotDsl1TieneResourceGroup/ResourceGroup.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7b3da52c-33aa-44e4-9981-1242c4edba84")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a IotDsl1
		/// <summary>
		/// Gets a list of ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ResourceGroup> GetResourceGroup(IotDsl1 element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ResourceGroup>, ResourceGroup>(element, IotDsl1DomainRoleId);
		}
		#endregion
		#region IotDsl1 link accessor
		/// <summary>
		/// Get the list of IotDsl1TieneResourceGroup links to a IotDsl1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> GetLinksToResourceGroup ( global::Compañía.IotDsl.IotDsl1 iotDsl1Instance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(iotDsl1Instance, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1DomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the IotDsl1TieneResourceGroup link to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IotDsl1TieneResourceGroup GetLinkToIotDsl1 (global::Compañía.IotDsl.ResourceGroup resourceGroupInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(resourceGroupInstance, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.ResourceGroupDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ResourceGroup not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IotDsl1TieneResourceGroup instance accessors
		
		/// <summary>
		/// Get any IotDsl1TieneResourceGroup links between a given IotDsl1 and a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> GetLinks( global::Compañía.IotDsl.IotDsl1 source, global::Compañía.IotDsl.ResourceGroup target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(source, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1DomainRoleId);
			foreach ( global::Compañía.IotDsl.IotDsl1TieneResourceGroup link in links )
			{
				if ( target.Equals(link.ResourceGroup) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IotDsl1TieneResourceGroup link between a given IotDsl1and a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IotDsl1TieneResourceGroup GetLink( global::Compañía.IotDsl.IotDsl1 source, global::Compañía.IotDsl.ResourceGroup target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IotDsl1TieneResourceGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IotDsl1TieneResourceGroup>(source, global::Compañía.IotDsl.IotDsl1TieneResourceGroup.IotDsl1DomainRoleId);
			foreach ( global::Compañía.IotDsl.IotDsl1TieneResourceGroup link in links )
			{
				if ( target.Equals(link.ResourceGroup) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneIoTCenter
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneIoTCenter
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("79b8c6cc-0624-4c3c-99cd-5a168a6c9ca3")]
	public partial class ResourceGroupTieneIoTCenter : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneIoTCenter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x79b8c6cc, 0x0624, 0x4c3c, 0x99, 0xcd, 0x5a, 0x16, 0x8a, 0x6c, 0x9c, 0xa3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneIoTCenter link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">IoTCenter to use as the target of the relationship.</param>
		public ResourceGroupTieneIoTCenter(ResourceGroup source, IoTCenter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneIoTCenter.IoTCenterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneIoTCenter(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0xd724805d, 0xc88b, 0x4354, 0xbf, 0x67, 0x33, 0x3d, 0xbf, 0x57, 0x3a, 0x61);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IoTCenter", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneIoTCenter/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d724805d-c88b-4354-bf67-333dbf573a61")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a IoTCenter
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(IoTCenter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IoTCenterDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(IoTCenter element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IoTCenterDomainRoleId, newResourceGroup);
		}
		#endregion
		#region IoTCenter domain role code
		
		/// <summary>
		/// IoTCenter domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTCenterDomainRoleId = new global::System.Guid(0x8bce4ddb, 0x3934, 0x4e00, 0x98, 0xff, 0xba, 0x4e, 0x62, 0x90, 0x84, 0xc9);
		
		/// <summary>
		/// DomainRole IoTCenter
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneIoTCenter.IoTCenter
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/IoTCenter.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneIoTCenter/IoTCenter.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneIoTCenter/IoTCenter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8bce4ddb-3934-4e00-98ff-ba4e629084c9")]
		public virtual IoTCenter IoTCenter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTCenter)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTCenterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTCenterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTCenter of a ResourceGroup
		/// <summary>
		/// Gets a list of IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IoTCenter> GetIoTCenter(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IoTCenter>, IoTCenter>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneIoTCenter links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> GetLinksToIoTCenter ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId);
		}
		#endregion
		#region IoTCenter link accessor
		/// <summary>
		/// Get the ResourceGroupTieneIoTCenter link to a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneIoTCenter GetLinkToResourceGroup (global::Compañía.IotDsl.IoTCenter ioTCenterInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(ioTCenterInstance, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.IoTCenterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IoTCenter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneIoTCenter instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneIoTCenter links between a given ResourceGroup and a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.IoTCenter target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(source, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneIoTCenter link in links )
			{
				if ( target.Equals(link.IoTCenter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneIoTCenter link between a given ResourceGroupand a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneIoTCenter GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.IoTCenter target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneIoTCenter>(source, global::Compañía.IotDsl.ResourceGroupTieneIoTCenter.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneIoTCenter link in links )
			{
				if ( target.Equals(link.IoTCenter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneMessagingasaService
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneMessagingasaService
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneMessagingasaService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneMessagingasaService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3b746ff3-8cfe-4f62-a3fc-c58ea4022c6b")]
	public partial class ResourceGroupTieneMessagingasaService : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneMessagingasaService domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3b746ff3, 0x8cfe, 0x4f62, 0xa3, 0xfc, 0xc5, 0x8e, 0xa4, 0x02, 0x2c, 0x6b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneMessagingasaService link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">MessagingasaService to use as the target of the relationship.</param>
		public ResourceGroupTieneMessagingasaService(ResourceGroup source, MessagingasaService target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneMessagingasaService.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneMessagingasaService.MessagingasaServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneMessagingasaService(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneMessagingasaService(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneMessagingasaService(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneMessagingasaService(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0xacc63f7d, 0x1a6a, 0x4067, 0xa9, 0x6b, 0x78, 0x93, 0x39, 0xff, 0xc9, 0xcf);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de
		/// Compañía.IotDsl.ResourceGroupTieneMessagingasaService.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneMessagingasaService/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneMessagingasaService/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MessagingasaService", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneMessagingasaService/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("acc63f7d-1a6a-4067-a96b-789339ffc9cf")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a MessagingasaService
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(MessagingasaService element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MessagingasaServiceDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(MessagingasaService element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MessagingasaServiceDomainRoleId, newResourceGroup);
		}
		#endregion
		#region MessagingasaService domain role code
		
		/// <summary>
		/// MessagingasaService domain role Id.
		/// </summary>
		public static readonly global::System.Guid MessagingasaServiceDomainRoleId = new global::System.Guid(0x2a8f543d, 0xc972, 0x4ec7, 0xb7, 0xa8, 0x6d, 0xb3, 0x31, 0xf8, 0xa6, 0x45);
		
		/// <summary>
		/// DomainRole MessagingasaService
		/// Descripción de
		/// Compañía.IotDsl.ResourceGroupTieneMessagingasaService.MessagingasaService
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneMessagingasaService/MessagingasaService.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneMessagingasaService/MessagingasaService.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneMessagingasaService/MessagingasaService.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2a8f543d-c972-4ec7-b7a8-6db331f8a645")]
		public virtual MessagingasaService MessagingasaService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MessagingasaService)DslModeling::DomainRoleInfo.GetRolePlayer(this, MessagingasaServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MessagingasaServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MessagingasaService of a ResourceGroup
		/// <summary>
		/// Gets a list of MessagingasaService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MessagingasaService> GetMessagingasaService(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MessagingasaService>, MessagingasaService>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneMessagingasaService links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService> GetLinksToMessagingasaService ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService.ResourceGroupDomainRoleId);
		}
		#endregion
		#region MessagingasaService link accessor
		/// <summary>
		/// Get the ResourceGroupTieneMessagingasaService link to a MessagingasaService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService GetLinkToResourceGroup (global::Compañía.IotDsl.MessagingasaService messagingasaServiceInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService>(messagingasaServiceInstance, global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService.MessagingasaServiceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MessagingasaService not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneMessagingasaService instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneMessagingasaService links between a given ResourceGroup and a MessagingasaService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.MessagingasaService target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService>(source, global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService link in links )
			{
				if ( target.Equals(link.MessagingasaService) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneMessagingasaService link between a given ResourceGroupand a MessagingasaService.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.MessagingasaService target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService>(source, global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneMessagingasaService link in links )
			{
				if ( target.Equals(link.MessagingasaService) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneDataAnalytics
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneDataAnalytics
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneDataAnalytics.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneDataAnalytics.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1b9fae46-85f1-4de3-bb51-e4adac5b1f2e")]
	public partial class ResourceGroupTieneDataAnalytics : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneDataAnalytics domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b9fae46, 0x85f1, 0x4de3, 0xbb, 0x51, 0xe4, 0xad, 0xac, 0x5b, 0x1f, 0x2e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneDataAnalytics link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">DataAnalytics to use as the target of the relationship.</param>
		public ResourceGroupTieneDataAnalytics(ResourceGroup source, DataAnalytics target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneDataAnalytics.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneDataAnalytics.DataAnalyticsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneDataAnalytics(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneDataAnalytics(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneDataAnalytics(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneDataAnalytics(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0xaf2dbaf1, 0x305d, 0x4656, 0x99, 0x07, 0xae, 0xf1, 0xb9, 0x55, 0x96, 0x59);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneDataAnalytics.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneDataAnalytics/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneDataAnalytics/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataAnalytics", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneDataAnalytics/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("af2dbaf1-305d-4656-9907-aef1b9559659")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a DataAnalytics
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(DataAnalytics element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataAnalyticsDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(DataAnalytics element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataAnalyticsDomainRoleId, newResourceGroup);
		}
		#endregion
		#region DataAnalytics domain role code
		
		/// <summary>
		/// DataAnalytics domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataAnalyticsDomainRoleId = new global::System.Guid(0x7a1f4bb8, 0xd91d, 0x4880, 0x8f, 0xb8, 0xee, 0x20, 0x82, 0x5d, 0x37, 0xfd);
		
		/// <summary>
		/// DomainRole DataAnalytics
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneDataAnalytics.DataAnalytics
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneDataAnalytics/DataAnalytics.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneDataAnalytics/DataAnalytics.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneDataAnalytics/DataAnalytics.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7a1f4bb8-d91d-4880-8fb8-ee20825d37fd")]
		public virtual DataAnalytics DataAnalytics
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataAnalytics)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataAnalyticsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataAnalyticsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataAnalytics of a ResourceGroup
		/// <summary>
		/// Gets a list of DataAnalytics.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataAnalytics> GetDataAnalytics(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataAnalytics>, DataAnalytics>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneDataAnalytics links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics> GetLinksToDataAnalytics ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics.ResourceGroupDomainRoleId);
		}
		#endregion
		#region DataAnalytics link accessor
		/// <summary>
		/// Get the ResourceGroupTieneDataAnalytics link to a DataAnalytics.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics GetLinkToResourceGroup (global::Compañía.IotDsl.DataAnalytics dataAnalyticsInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics>(dataAnalyticsInstance, global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics.DataAnalyticsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataAnalytics not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneDataAnalytics instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneDataAnalytics links between a given ResourceGroup and a DataAnalytics.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.DataAnalytics target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics>(source, global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics link in links )
			{
				if ( target.Equals(link.DataAnalytics) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneDataAnalytics link between a given ResourceGroupand a DataAnalytics.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.DataAnalytics target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics>(source, global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneDataAnalytics link in links )
			{
				if ( target.Equals(link.DataAnalytics) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneNoSQLStorage
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneNoSQLStorage
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("28745ab1-59d3-4f40-8042-a8ef463b98b3")]
	public partial class ResourceGroupTieneNoSQLStorage : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneNoSQLStorage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x28745ab1, 0x59d3, 0x4f40, 0x80, 0x42, 0xa8, 0xef, 0x46, 0x3b, 0x98, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneNoSQLStorage link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">NoSQLStorage to use as the target of the relationship.</param>
		public ResourceGroupTieneNoSQLStorage(ResourceGroup source, NoSQLStorage target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneNoSQLStorage.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneNoSQLStorage.NoSQLStorageDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneNoSQLStorage(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneNoSQLStorage(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneNoSQLStorage(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneNoSQLStorage(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0xcf820894, 0x4817, 0x446d, 0x83, 0x1f, 0xea, 0xfb, 0xc6, 0x7a, 0x52, 0x90);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneNoSQLStorage/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneNoSQLStorage/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NoSQLStorage", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneNoSQLStorage/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cf820894-4817-446d-831f-eafbc67a5290")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a NoSQLStorage
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(NoSQLStorage element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NoSQLStorageDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(NoSQLStorage element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NoSQLStorageDomainRoleId, newResourceGroup);
		}
		#endregion
		#region NoSQLStorage domain role code
		
		/// <summary>
		/// NoSQLStorage domain role Id.
		/// </summary>
		public static readonly global::System.Guid NoSQLStorageDomainRoleId = new global::System.Guid(0xa17dc33e, 0x2c60, 0x48ef, 0xbe, 0x8a, 0x84, 0xe9, 0x7a, 0xf6, 0x4d, 0x20);
		
		/// <summary>
		/// DomainRole NoSQLStorage
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.NoSQLStorage
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneNoSQLStorage/NoSQLStorage.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneNoSQLStorage/NoSQLStorage.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneNoSQLStorage/NoSQLStorage.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a17dc33e-2c60-48ef-be8a-84e97af64d20")]
		public virtual NoSQLStorage NoSQLStorage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NoSQLStorage)DslModeling::DomainRoleInfo.GetRolePlayer(this, NoSQLStorageDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NoSQLStorageDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NoSQLStorage of a ResourceGroup
		/// <summary>
		/// Gets a list of NoSQLStorage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NoSQLStorage> GetNoSQLStorage(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NoSQLStorage>, NoSQLStorage>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneNoSQLStorage links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage> GetLinksToNoSQLStorage ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.ResourceGroupDomainRoleId);
		}
		#endregion
		#region NoSQLStorage link accessor
		/// <summary>
		/// Get the ResourceGroupTieneNoSQLStorage link to a NoSQLStorage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage GetLinkToResourceGroup (global::Compañía.IotDsl.NoSQLStorage noSQLStorageInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage>(noSQLStorageInstance, global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.NoSQLStorageDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NoSQLStorage not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneNoSQLStorage instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneNoSQLStorage links between a given ResourceGroup and a NoSQLStorage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.NoSQLStorage target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage>(source, global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage link in links )
			{
				if ( target.Equals(link.NoSQLStorage) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneNoSQLStorage link between a given ResourceGroupand a NoSQLStorage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.NoSQLStorage target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage>(source, global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneNoSQLStorage link in links )
			{
				if ( target.Equals(link.NoSQLStorage) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneDashBoard
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneDashBoard
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneDashBoard.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneDashBoard.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4c110331-ee40-4837-b20a-fae008920df9")]
	public partial class ResourceGroupTieneDashBoard : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneDashBoard domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4c110331, 0xee40, 0x4837, 0xb2, 0x0a, 0xfa, 0xe0, 0x08, 0x92, 0x0d, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneDashBoard link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">DashBoard to use as the target of the relationship.</param>
		public ResourceGroupTieneDashBoard(ResourceGroup source, DashBoard target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneDashBoard.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneDashBoard.DashBoardDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneDashBoard(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneDashBoard(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneDashBoard(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneDashBoard(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0x3b13c68c, 0xf6eb, 0x4170, 0x88, 0x73, 0x48, 0x7c, 0xc6, 0x3d, 0xf6, 0x4a);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneDashBoard.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneDashBoard/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneDashBoard/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DashBoard", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneDashBoard/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3b13c68c-f6eb-4170-8873-487cc63df64a")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a DashBoard
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(DashBoard element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DashBoardDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(DashBoard element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DashBoardDomainRoleId, newResourceGroup);
		}
		#endregion
		#region DashBoard domain role code
		
		/// <summary>
		/// DashBoard domain role Id.
		/// </summary>
		public static readonly global::System.Guid DashBoardDomainRoleId = new global::System.Guid(0x6a480f1c, 0xdfe1, 0x4b8f, 0x93, 0x30, 0x60, 0x31, 0xc2, 0x55, 0x26, 0xb4);
		
		/// <summary>
		/// DomainRole DashBoard
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneDashBoard.DashBoard
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneDashBoard/DashBoard.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneDashBoard/DashBoard.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneDashBoard/DashBoard.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6a480f1c-dfe1-4b8f-9330-6031c25526b4")]
		public virtual DashBoard DashBoard
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DashBoard)DslModeling::DomainRoleInfo.GetRolePlayer(this, DashBoardDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DashBoardDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DashBoard of a ResourceGroup
		/// <summary>
		/// Gets a list of DashBoard.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DashBoard> GetDashBoard(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DashBoard>, DashBoard>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneDashBoard links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneDashBoard> GetLinksToDashBoard ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDashBoard>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneDashBoard.ResourceGroupDomainRoleId);
		}
		#endregion
		#region DashBoard link accessor
		/// <summary>
		/// Get the ResourceGroupTieneDashBoard link to a DashBoard.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneDashBoard GetLinkToResourceGroup (global::Compañía.IotDsl.DashBoard dashBoardInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneDashBoard> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDashBoard>(dashBoardInstance, global::Compañía.IotDsl.ResourceGroupTieneDashBoard.DashBoardDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DashBoard not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneDashBoard instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneDashBoard links between a given ResourceGroup and a DashBoard.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneDashBoard> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.DashBoard target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneDashBoard> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneDashBoard>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneDashBoard> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDashBoard>(source, global::Compañía.IotDsl.ResourceGroupTieneDashBoard.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneDashBoard link in links )
			{
				if ( target.Equals(link.DashBoard) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneDashBoard link between a given ResourceGroupand a DashBoard.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneDashBoard GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.DashBoard target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneDashBoard> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneDashBoard>(source, global::Compañía.IotDsl.ResourceGroupTieneDashBoard.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneDashBoard link in links )
			{
				if ( target.Equals(link.DashBoard) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship ResourceGroupTieneEndpoints
	/// Descripción de Compañía.IotDsl.ResourceGroupTieneEndpoints
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneEndpoints.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneEndpoints.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dda76118-cfc4-45ab-abc3-2453f2962565")]
	public partial class ResourceGroupTieneEndpoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ResourceGroupTieneEndpoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdda76118, 0xcfc4, 0x45ab, 0xab, 0xc3, 0x24, 0x53, 0xf2, 0x96, 0x25, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ResourceGroupTieneEndpoints link in the same Partition as the given ResourceGroup
		/// </summary>
		/// <param name="source">ResourceGroup to use as the source of the relationship.</param>
		/// <param name="target">Endpoints to use as the target of the relationship.</param>
		public ResourceGroupTieneEndpoints(ResourceGroup source, Endpoints target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ResourceGroupTieneEndpoints.ResourceGroupDomainRoleId, source), new DslModeling::RoleAssignment(ResourceGroupTieneEndpoints.EndpointsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneEndpoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneEndpoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ResourceGroupTieneEndpoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ResourceGroupTieneEndpoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ResourceGroup domain role code
		
		/// <summary>
		/// ResourceGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid ResourceGroupDomainRoleId = new global::System.Guid(0x8bc53bdd, 0x9669, 0x433d, 0xb0, 0x8e, 0x87, 0xff, 0x7c, 0x84, 0x06, 0x65);
		
		/// <summary>
		/// DomainRole ResourceGroup
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneEndpoints.ResourceGroup
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneEndpoints/ResourceGroup.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneEndpoints/ResourceGroup.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Endpoints", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneEndpoints/ResourceGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8bc53bdd-9669-433d-b08e-87ff7c840665")]
		public virtual ResourceGroup ResourceGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ResourceGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, ResourceGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ResourceGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResourceGroup of a Endpoints
		/// <summary>
		/// Gets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ResourceGroup GetResourceGroup(Endpoints element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndpointsDomainRoleId) as ResourceGroup;
		}
		
		/// <summary>
		/// Sets ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResourceGroup(Endpoints element, ResourceGroup newResourceGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndpointsDomainRoleId, newResourceGroup);
		}
		#endregion
		#region Endpoints domain role code
		
		/// <summary>
		/// Endpoints domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointsDomainRoleId = new global::System.Guid(0x74ee8cdb, 0x93ff, 0x42f6, 0xa8, 0x3c, 0x9d, 0xec, 0x62, 0xa6, 0x42, 0x67);
		
		/// <summary>
		/// DomainRole Endpoints
		/// Descripción de Compañía.IotDsl.ResourceGroupTieneEndpoints.Endpoints
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.ResourceGroupTieneEndpoints/Endpoints.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.ResourceGroupTieneEndpoints/Endpoints.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResourceGroup", PropertyDisplayNameKey="Compañía.IotDsl.ResourceGroupTieneEndpoints/Endpoints.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("74ee8cdb-93ff-42f6-a83c-9dec62a64267")]
		public virtual Endpoints Endpoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoints)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoints of a ResourceGroup
		/// <summary>
		/// Gets a list of Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Endpoints> GetEndpoints(ResourceGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoints>, Endpoints>(element, ResourceGroupDomainRoleId);
		}
		#endregion
		#region ResourceGroup link accessor
		/// <summary>
		/// Get the list of ResourceGroupTieneEndpoints links to a ResourceGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneEndpoints> GetLinksToEndpoints ( global::Compañía.IotDsl.ResourceGroup resourceGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoints>(resourceGroupInstance, global::Compañía.IotDsl.ResourceGroupTieneEndpoints.ResourceGroupDomainRoleId);
		}
		#endregion
		#region Endpoints link accessor
		/// <summary>
		/// Get the ResourceGroupTieneEndpoints link to a Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneEndpoints GetLinkToResourceGroup (global::Compañía.IotDsl.Endpoints endpointsInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoints>(endpointsInstance, global::Compañía.IotDsl.ResourceGroupTieneEndpoints.EndpointsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Endpoints not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ResourceGroupTieneEndpoints instance accessors
		
		/// <summary>
		/// Get any ResourceGroupTieneEndpoints links between a given ResourceGroup and a Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.ResourceGroupTieneEndpoints> GetLinks( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.Endpoints target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneEndpoints> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.ResourceGroupTieneEndpoints>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoints>(source, global::Compañía.IotDsl.ResourceGroupTieneEndpoints.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneEndpoints link in links )
			{
				if ( target.Equals(link.Endpoints) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ResourceGroupTieneEndpoints link between a given ResourceGroupand a Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.ResourceGroupTieneEndpoints GetLink( global::Compañía.IotDsl.ResourceGroup source, global::Compañía.IotDsl.Endpoints target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.ResourceGroupTieneEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.ResourceGroupTieneEndpoints>(source, global::Compañía.IotDsl.ResourceGroupTieneEndpoints.ResourceGroupDomainRoleId);
			foreach ( global::Compañía.IotDsl.ResourceGroupTieneEndpoints link in links )
			{
				if ( target.Equals(link.Endpoints) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Compañía.IotDsl
{
	/// <summary>
	/// DomainRelationship IoTCenterReferenciasEndpoints
	/// Descripción de Compañía.IotDsl.IoTCenterReferenciasEndpoints
	/// </summary>
	[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTCenterReferenciasEndpoints.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Compañía.IotDsl.IoTCenterReferenciasEndpoints.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Compañía.IotDsl.IotDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e09bf60c-aa20-45e9-850e-2b974bf05aa4")]
	public partial class IoTCenterReferenciasEndpoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTCenterReferenciasEndpoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe09bf60c, 0xaa20, 0x45e9, 0x85, 0x0e, 0x2b, 0x97, 0x4b, 0xf0, 0x5a, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTCenterReferenciasEndpoints link in the same Partition as the given IoTCenter
		/// </summary>
		/// <param name="source">IoTCenter to use as the source of the relationship.</param>
		/// <param name="target">Endpoints to use as the target of the relationship.</param>
		public IoTCenterReferenciasEndpoints(IoTCenter source, Endpoints target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTCenterReferenciasEndpoints.IoTCenterDomainRoleId, source), new DslModeling::RoleAssignment(IoTCenterReferenciasEndpoints.EndpointsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTCenterReferenciasEndpoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTCenterReferenciasEndpoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTCenterReferenciasEndpoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTCenterReferenciasEndpoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTCenter domain role code
		
		/// <summary>
		/// IoTCenter domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTCenterDomainRoleId = new global::System.Guid(0xd5fb9485, 0x7cbe, 0x420a, 0x9a, 0x22, 0x89, 0xac, 0xf0, 0x26, 0x7f, 0xda);
		
		/// <summary>
		/// DomainRole IoTCenter
		/// Descripción de Compañía.IotDsl.IoTCenterReferenciasEndpoints.IoTCenter
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTCenterReferenciasEndpoints/IoTCenter.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IoTCenterReferenciasEndpoints/IoTCenter.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Endpoints", PropertyDisplayNameKey="Compañía.IotDsl.IoTCenterReferenciasEndpoints/IoTCenter.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d5fb9485-7cbe-420a-9a22-89acf0267fda")]
		public virtual IoTCenter IoTCenter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTCenter)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTCenterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTCenterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTCenter of a Endpoints
		/// <summary>
		/// Gets IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTCenter GetIoTCenter(Endpoints element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndpointsDomainRoleId) as IoTCenter;
		}
		
		/// <summary>
		/// Sets IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTCenter(Endpoints element, IoTCenter newIoTCenter)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndpointsDomainRoleId, newIoTCenter);
		}
		#endregion
		#region Endpoints domain role code
		
		/// <summary>
		/// Endpoints domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointsDomainRoleId = new global::System.Guid(0x2656a986, 0xefce, 0x4f91, 0x96, 0xff, 0x9d, 0x23, 0xe2, 0xe4, 0x91, 0x95);
		
		/// <summary>
		/// DomainRole Endpoints
		/// Descripción de Compañía.IotDsl.IoTCenterReferenciasEndpoints.Endpoints
		/// </summary>
		[DslDesign::DisplayNameResource("Compañía.IotDsl.IoTCenterReferenciasEndpoints/Endpoints.DisplayName", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Compañía.IotDsl.IoTCenterReferenciasEndpoints/Endpoints.Description", typeof(global::Compañía.IotDsl.IotDslDomainModel), "Compañía.IotDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTCenter", PropertyDisplayNameKey="Compañía.IotDsl.IoTCenterReferenciasEndpoints/Endpoints.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2656a986-efce-4f91-96ff-9d23e2e49195")]
		public virtual Endpoints Endpoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoints)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoints of a IoTCenter
		/// <summary>
		/// Gets a list of Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Endpoints> GetEndpoints(IoTCenter element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoints>, Endpoints>(element, IoTCenterDomainRoleId);
		}
		#endregion
		#region IoTCenter link accessor
		/// <summary>
		/// Get the list of IoTCenterReferenciasEndpoints links to a IoTCenter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints> GetLinksToEndpoints ( global::Compañía.IotDsl.IoTCenter ioTCenterInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints>(ioTCenterInstance, global::Compañía.IotDsl.IoTCenterReferenciasEndpoints.IoTCenterDomainRoleId);
		}
		#endregion
		#region Endpoints link accessor
		/// <summary>
		/// Get the IoTCenterReferenciasEndpoints link to a Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IoTCenterReferenciasEndpoints GetLinkToIoTCenter (global::Compañía.IotDsl.Endpoints endpointsInstance)
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints>(endpointsInstance, global::Compañía.IotDsl.IoTCenterReferenciasEndpoints.EndpointsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Endpoints not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTCenterReferenciasEndpoints instance accessors
		
		/// <summary>
		/// Get any IoTCenterReferenciasEndpoints links between a given IoTCenter and a Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints> GetLinks( global::Compañía.IotDsl.IoTCenter source, global::Compañía.IotDsl.Endpoints target )
		{
			global::System.Collections.Generic.List<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints> outLinks = new global::System.Collections.Generic.List<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints>();
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints>(source, global::Compañía.IotDsl.IoTCenterReferenciasEndpoints.IoTCenterDomainRoleId);
			foreach ( global::Compañía.IotDsl.IoTCenterReferenciasEndpoints link in links )
			{
				if ( target.Equals(link.Endpoints) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTCenterReferenciasEndpoints link between a given IoTCenterand a Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Compañía.IotDsl.IoTCenterReferenciasEndpoints GetLink( global::Compañía.IotDsl.IoTCenter source, global::Compañía.IotDsl.Endpoints target )
		{
			global::System.Collections.Generic.IList<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Compañía.IotDsl.IoTCenterReferenciasEndpoints>(source, global::Compañía.IotDsl.IoTCenterReferenciasEndpoints.IoTCenterDomainRoleId);
			foreach ( global::Compañía.IotDsl.IoTCenterReferenciasEndpoints link in links )
			{
				if ( target.Equals(link.Endpoints) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
