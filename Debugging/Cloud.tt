<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".ps1" #>
<#@ IotDsl processor="IotDslDirectiveProcessor" requires="fileName='Test.IotDsl'" #>
Login-AzureRmAccount;
<#
foreach(ResourceGroup resourceGroup in this.IoTDsl.ResourceGroups){
#>
#Resource group creation
New-AzureRmResourceGroup -Name <#=resourceGroup.Name#> -Location <#=resourceGroup.Location#>;
<#
foreach(CloudService cloudService in resourceGroup.CloudServices) {
if(cloudService is SQLStorage){
SQLStorage sql = cloudService as SQLStorage;
#>
#SQL storage resources
New-AzureRmSqlServer -ResourceGroupName <#=resourceGroup.Name#> -ServerName <#=sql.Name#>server -Location <#=resourceGroup.Location#> -SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList <#=sql.User#>, $(ConvertTo-SecureString -String <#=sql.Password#> -AsPlainText -Force));
New-AzureRmSqlServerFirewallRule –ResourceGroupName <#=resourceGroup.Name#> -ServerName <#=sql.Name#>server -FirewallRuleName "Allowsome" -StartIpAddress 0.0.0.0 -EndIpAddress 255.255.255.255;
New-AzureRmSqlDatabase  -ResourceGroupName <#=resourceGroup.Name#> -ServerName <#=sql.Name#>server -DatabaseName <#=sql.Name#>db -RequestedServiceObjectiveName "S0";
<#
} else if (cloudService is NoSQLStorage){
NoSQLStorage noSql = cloudService as NoSQLStorage;
#>
#NoSQL storage resources
New-AzureRmStorageAccount -ResourceGroupNAme <#=resourceGroup.Name#> -Name <#=noSql.Name#> -SkuName Standard_LRS -Location <#=resourceGroup.Location#> -Kind Storage;
<#
} else if (cloudService is AppService){
AppService appService = cloudService as AppService;
#>
#App service resources
New-AzureRmAppServicePlan -ResourceGroupName <#=resourceGroup.Name#> -Name <#=appService.Name#>plan -Location <#=resourceGroup.Location#> -Tier "free";
New-AzureRmWebApp -ResourceGroupName <#=resourceGroup.Name#> -Name <#=appService.Name#> -Location <#=resourceGroup.Location#> -AppServicePlan <#=appService.Name#>plan;
<#}#>
<#}#>
<#}#>