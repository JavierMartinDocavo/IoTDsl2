<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" lenguage="C#" hostspecific="True"#>
<#@ output extension=".ps1" #>
<#@ IotDsl processor="IotDslDirectiveProcessor" requires="fileName='Test.IotDsl'" #>
<#@ include file="EF.utility.CS.ttinclude" #>
Login-AzureRmAccount;
<#
foreach(ResourceGroup resourceGroup in this.IoTDsl.ResourceGroups){
#>
#Resource group creation
New-AzureRmResourceGroup -Name <#=resourceGroup.Name#> -Location <#=resourceGroup.Location#>;
<#
foreach(CloudService cloudService in resourceGroup.CloudServices) {
if(cloudService is SQLStorage){
SQLStorage sql = cloudService as SQLStorage;
#>
#SQL storage resources
New-AzureRmSqlServer -ResourceGroupName <#=resourceGroup.Name#> -ServerName <#=sql.Name#>server -Location <#=resourceGroup.Location#> -SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList <#=sql.User#>, $(ConvertTo-SecureString -String <#=sql.Password#> -AsPlainText -Force));
New-AzureRmSqlServerFirewallRule –ResourceGroupName <#=resourceGroup.Name#> -ServerName <#=sql.Name#>server -FirewallRuleName "Allowsome" -StartIpAddress 0.0.0.0 -EndIpAddress 255.255.255.255;
New-AzureRmSqlDatabase  -ResourceGroupName <#=resourceGroup.Name#> -ServerName <#=sql.Name#>server -DatabaseName <#=sql.Name#>db -RequestedServiceObjectiveName "S0";
<#
} else if (cloudService is NoSQLStorage){
NoSQLStorage noSql = cloudService as NoSQLStorage;
#>
#NoSQL storage resources
New-AzureRmStorageAccount -ResourceGroupNAme <#=resourceGroup.Name#> -Name <#=noSql.Name#> -SkuName Standard_LRS -Location <#=resourceGroup.Location#> -Kind Storage;
<#
} else if (cloudService is AppService){
AppService appService = cloudService as AppService;
#>
#App service resources
New-AzureRmAppServicePlan -ResourceGroupName <#=resourceGroup.Name#> -Name <#=appService.Name#>plan -Location <#=resourceGroup.Location#> -Tier <#if (this.IoTDsl.ServicePlan == "F1"){#>"free"<#}#>;
New-AzureRmWebApp -ResourceGroupName <#=resourceGroup.Name#> -Name <#=appService.Name#> -Location <#=resourceGroup.Location#> -AppServicePlan <#=appService.Name#>plan;
<#} else if (cloudService is MessageService){
MessageService serviceBus =  cloudService as MessageService;
#>
#ServiceBus resources
New-AzureRmResourceGroupDeployment -ResourceGroupName <#=resourceGroup.Name#> -TemplateFile <#=serviceBus.Name#>.json -namespaces_servicebusjmd_name <#=serviceBus.Name#> -queues_iothubque_name <#=serviceBus.Name#>Queue;
<#}#>
<#}#>
<#}#>
<#
var fileManager=EntityFrameworkTemplateFileManager.Create(this);
foreach(ResourceGroup resourceGroup in this.IoTDsl.ResourceGroups){
foreach(CloudService cloudService in resourceGroup.CloudServices) {
if (cloudService is MessageService){
MessageService serviceBus =  cloudService as MessageService;
fileManager.StartNewFile(serviceBus.Name + ".json");
#>
{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    
	"contentVersion": "1.0.0.0",
	"parameters":{
	
	        "namespaces_servicebusjmd_name": {
            
			"defaultValue": "servicebusjmd",

            		"type": "String"
	
        },
		"queues_iothubque_name": {

			"defaultValue": "iothubque",
			"type": "String"
	
        },
		"authorizationRules_iothubroutes_IotJMD_name": {

			"defaultValue": "iothubroutes_IotJMD",

			"type": "String"
		}
	},
	"variables":{},
	"resources":[
		{

			"type": "Microsoft.ServiceBus/namespaces",

			"sku": {

				"name": <#if (this.IoTDsl.ServicePlan == "F1"){#>"Basic"<#}#>,
				"tier": <#if (this.IoTDsl.ServicePlan == "F1"){#>"Basic"<#}#>
			},
			"name": "[parameters('namespaces_servicebusjmd_name')]",
			"apiVersion": "2017-04-01",
			"location": "West Europe",
			"tags": {},

			"scale": null,
			
"properties": {

				"provisioningState": "Succeeded",

				"metricId": "[concat('a6492183-3009-45d2-bd0a-000dbbd6be72:', parameters('namespaces_servicebusjmd_name'))]",
				"createdAt": "2018-01-08T09:18:45.68Z",
				"updatedAt": "2018-01-08T09:20:34.253Z",

				"serviceBusEndpoint": "[concat('https://', parameters('namespaces_servicebusjmd_name'),'.servicebus.windows.net:443/')]"
			},
			"dependsOn": []
		},
		{
			"type": "Microsoft.ServiceBus/namespaces/queues",
			"name": "[concat(parameters('namespaces_servicebusjmd_name'), '/', parameters('queues_iothubque_name'))]",

			"apiVersion": "2017-04-01",
			"location": "West Europe",

			"scale": null,
			"properties": {

				"maxSizeInMegabytes": 1024,

				"requiresDuplicateDetection": false,
				"requiresSession": false,
				"defaultMessageTimeToLive": "P14D",

				"deadLetteringOnMessageExpiration": false,
				"status": "Active",
				"enablePartitioning": true,

				"enableExpress": false,
				"countDetails": {

					"activeMessageCount": 0,

					"deadLetterMessageCount": 0,
					"scheduledMessageCount": 0,

					"transferMessageCount": 0,

					"transferDeadLetterMessageCount": 0

				},

				"createdAt": "2018-01-08T09:22:47.407Z",
				"updatedAt": "2018-01-08T09:45:30.9638494Z",

				"accessedAt": "2018-01-08T10:01:27.2383629Z"

				},
				"dependsOn": [

					"[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaces_servicebusjmd_name'))]"

				]

		},
		{	"type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",

			"name": "[concat(parameters('namespaces_servicebusjmd_name'), '/', parameters('queues_iothubque_name'), '/', parameters('authorizationRules_iothubroutes_IotJMD_name'))]",
			"apiVersion": "2017-04-01",

			"location": "West Europe",

			"scale": null,

			"properties": {

				"rights": [

					"Manage",
					"Listen",

					"Send"

				]

			},
			"dependsOn": [
				"[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaces_servicebusjmd_name'))]",
				"[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaces_servicebusjmd_name'), parameters('queues_iothubque_name'))]"
			]

		}
	]
}
<#}#>
<#}#>
<#}

fileManager.Process();#>
