<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" lenguage="C#" hostspecific="True"#>
<#@ output extension=".java" #>
<#@ IotDsl processor="IotDslDirectiveProcessor" requires="fileName='../../Test.IotDsl'" #>
<#@ include file="EF.utility.CS.ttinclude" #>
<#
    var fileManager=EntityFrameworkTemplateFileManager.Create(this);
    foreach(ResourceGroup resourceGroup in this.IoTDsl.ResourceGroups){
        foreach (CloudService cloudService in resourceGroup.CloudServices)
        {
            if (cloudService is IoTCenter)
            {
			    IoTCenter hub = cloudService as IoTCenter;
                if (hub.Devices.Count == 1)
                {
                    Device device = hub.Devices.First();
                    if (device.Protocol == Protocol.Http && device.ProgrammingLenguage == ProgramingLenguage.Java)
                    {
                        BME280 sensor = device.Sensors.First() as BME280;
                        IoTCenterHasDevices relation = IoTCenterHasDevices.GetLink(hub, device);
                        fileManager.StartNewFile("ConsoleRouter.java");
#>
package IoTDsl;


import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import org.json.JSONObject;
import javax.net.ssl.HttpsURLConnection;

public class ConsoleRouter implements AutoCloseable {



	public void send(String data) {
		 
	try{
	    JSONObject rawResponseObject = new JSONObject(data.toString()); // raw data parsed to a object
        ArrayList<Object> updates = new ArrayList<Object>(); // creating an object array
	          
	    // GET timeStamp dynamic value
	    JSONObject timestampValueObject = rawResponseObject.getJSONObject("MotaMeasure").getJSONObject("timestamp");	  
		 JSONObject measuresValueObject = new JSONObject();
	    <#
		if (sensor.Temperature)
                        {
                            #>
        // GET Temperature dynamic value
	    measuresValueObject = rawResponseObject.getJSONObject("MotaMeasure").getJSONObject("measures").getJSONObject("temperature");
		<#
                        }
		#>
		<#
		if (sensor.Humidity)
                        {
                            #>
        // GET Humidity dynamic value
	    JSONObject humidityValueObject = rawResponseObject.getJSONObject("MotaMeasure").getJSONObject("measures").getJSONObject("humidity");
	   
		<#
                        }
		#>
		<#
		if (sensor.Pressure)
                        {
                            #>
        // GET Pressure dynamic value
	    JSONObject pressureValueObject = rawResponseObject.getJSONObject("MotaMeasure").getJSONObject("measures").getJSONObject("pressure");
		<#
                        }
		#>
		<#
		if (sensor.Altitude)
                        {
                            #>
        // GET Altitud dynamic value
	    JSONObject altitudeValueObject = rawResponseObject.getJSONObject("MotaMeasure").getJSONObject("measures").getJSONObject("altitude");
		<#
                        }
		#>
	   
	 
// START OF temperature & timeStamp & humidity & altitude & pressure dynamic implementation
        <#
		if (sensor.Temperature)
                        {
                            #>
        measuresValueObject.remove("unit");
	    measuresValueObject.put("field1", measuresValueObject.get("value").toString());
		measuresValueObject.remove("value");
		<#
                        }
		#>
	    measuresValueObject.put("created_at", timestampValueObject.get("$date"));
	    <#
		if (sensor.Altitude)
                        {
                            #>
        measuresValueObject.remove("unit");
	    measuresValueObject.put("field4", altitudeValueObject.get("value").toString());
		<#
                        }
		#>        
		<#
		if (sensor.Humidity)
                        {
                            #>
        humidityValueObject.remove("unit");
	    measuresValueObject.put("field2", humidityValueObject.get("value").toString());
		<#
                        }
		#>        
		<#
		if (sensor.Pressure)
                        {
                            #>
        pressureValueObject.remove("unit");
	    measuresValueObject.put("field3", pressureValueObject.get("value").toString());
		<#
                        }
		#>
	    
 // END OF temperature & timeStamp & humidity & altitude & pressure dynamic implementation
	    

	    updates.add(measuresValueObject); // adding temp & timestamp keys to the Array
	 
	    JSONObject mainObject = new JSONObject();
	    mainObject.put("updates", updates );
	    mainObject.put("write_api_key","<#=relation.DeviceKey #>");

	    
	    String url = "<#=hub.ConnectionString #>";
		URL obj = new URL(url);
		HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();
		
		//add request header
		con.setRequestMethod("POST");
		con.addRequestProperty("Content-Type", "application/json");
				
		// Send post request
		con.setDoOutput(true);
		
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(mainObject.toString());
		//wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Post parameters : " + mainObject);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();
		
		//print result
		System.out.println(response.toString());
		}
		
		 catch (Exception e){
			e.printStackTrace();
		 };
   
	} 
		


	public void close() throws Exception {
		
	}

}
<#
                        fileManager.StartNewFile("Concentrator.java");
#>
package IoTDsl;


import IoTDsl.BasicMonitor;
import IoTDsl.DataGenerator;
import IoTDsl.ConsoleRouter;

public class Concentrator {
	public static void main (String...args){


		try (
				DataGenerator listener = new DataGenerator(<#=sensor.RefreshRate #>);
				ConsoleRouter router = new ConsoleRouter();
				BasicMonitor monitor = new BasicMonitor(listener, router);){
				monitor.start();

			try {
				Thread.sleep(200000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			monitor.stop();

		} catch (Exception e2) {
			e2.printStackTrace();
		}


	}

}
<#
                        fileManager.StartNewFile("BasicMonitor.java");
#>
package IoTDsl;

import IoTDsl.DataGenerator;
import IoTDsl.ConsoleRouter;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import java.time.Instant;

public class BasicMonitor implements AutoCloseable {

	private DataGenerator listener;;
	private ConsoleRouter router;

	final private String TXT_HEADER = "<txt_ini>";
	final private String TXT_TAIL =   "<txt_end>";

	final private String LEC_HEADER = "<lec_ini>";
	final private String LEC_TAIL =   "<lec_end>";

	final private String MEASURE_MARKER = ";";
	final private String MARKER = "\\|";

	private boolean started = false;
	final private Object lock = new Object();

	public  BasicMonitor(final DataGenerator listener, final ConsoleRouter router){
		this.listener = listener;
		listener.setMonitor(this);
		this.router = router;
		Thread thread = new Thread(listener, listener.getClass().getName());
		thread.start();
	}

	/**
	 * this method is executed when the listener has a data.
	 * this method must not have side effects. Without state, it will not have synchronization problems
	 */

	public void dataObtained(final String object) {
		String translated = translate(object);
		router.send(translated);
	}

	public void close() throws Exception {
		synchronized (lock) {
			listener.close();
			router.close();
		}
	}

	public void start() {
		synchronized (lock) {
			listener.start();
			started = true;
		}
	}

	public void stop() {
		synchronized (lock) {
			listener.stop();
			started = false;
		}

	}

	public boolean isStarted() {
		synchronized (lock) {
			return started;
		}
	}

	public String translate(String data) {
		String msg = null;
		if (data.startsWith(TXT_HEADER)){
			msg = data.substring(TXT_HEADER.length(), data.length()-TXT_TAIL.length());
			return null;
		}else if (data.startsWith(LEC_HEADER)){
			msg = data.substring(LEC_HEADER.length(), data.length()-LEC_TAIL.length());
			msg = formatMessage(msg);
		}

		return msg;
	}



	private String formatMessage(final String data){
		JsonObject motaMeasureJSON = Json.createObjectBuilder().add("MotaMeasure", generateMotaMeasure(data)).build();
		String instanciaOntologia=motaMeasureJSON.toString();
		return instanciaOntologia;
	}

	private JsonObject generateMotaMeasure(final String data){
		String[] strings = data.split(MEASURE_MARKER);
		return Json.createObjectBuilder()
				.add("timestamp", generateTimeStamp())
				.add("MotaId", strings[0])
				.add("geometry", generateGeometry())
				.add("measures", generateMeasures(strings))
				.build();
	}

	private JsonObject generateTimeStamp(){

		return Json.createObjectBuilder()
				.add("$date", Instant.now().toString())
				.build();
	}

	private JsonObject generateGeometry(){
		return Json.createObjectBuilder()
				.add("type", "Point")
				.add("coordinates", Json.createArrayBuilder()
						.add(40.390575)
						.add(-3.626924))
				.build();
	}

	private JsonObject generateMeasures(String [] strings){

		//i = 0 is for the id of the mota
		JsonObjectBuilder builder = Json.createObjectBuilder();

		for(int i = 1; i < strings.length; i++){
			String[] data = strings[i].split(MARKER);
			String stringValue = data[1];
			Double value = Double.parseDouble(stringValue);
			builder.add(data[0], generateMeasure(data[2], value));
		}

		return builder.build();
	}

	private JsonObject generateMeasure(String unidad, Double value){
		return Json.createObjectBuilder()
				.add("value", value)
				.add("unit", unidad)
				.build();
	}




}
<#
                        fileManager.StartNewFile("DataGenerator.java");
#>
package IoTDsl;

import java.util.concurrent.ThreadLocalRandom;

import IoTDsl.BasicMonitor;

public class DataGenerator implements Runnable, AutoCloseable {

	final private Object lock = new Object();
	final private int timeLapse;

	private volatile boolean started = false; //synchronized by lock
	private volatile boolean closed = false; //synchronized by lock
	protected  BasicMonitor monitor;

	public DataGenerator(int timeLapse) {
		this.timeLapse = timeLapse;
	}


	final private String TXT_HEADER = "<txt_ini>";
	final private String TXT_TAIL =   "<txt_end>";

	final private String LEC_HEADER = "<lec_ini>";
	final private String LEC_TAIL =   "<lec_end>";

	final private String MEASURE_MARKER = ";";
	final private String MARKER = "|";

	public void run() {


	    int cycle = 5;
	    int i = 0;

		while (!closed){	//stopped is volatile

			//this code block is for implementing pause behaviour for this task
			//use the if before the synchronized block is a pattern for optimization found in http://docs.oracle.com/javase/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html
			//this code is used together with the pause and shutdown methods.
			//paused and stopped have to be volatile
			try {
		        if (!started) { //only block if the task has been paused, paused is volatile.
		            synchronized(lock) {
		                while (!started && !closed)
		                    lock.wait();
		            }
		        }
		    } catch (InterruptedException e){
		    }

			if (started){
				StringBuffer buffer = new StringBuffer();

				if (i < cycle){

					buffer.append(LEC_HEADER);
					buffer.append(13);
					<#
					if (sensor.Temperature)
                        {
                            #>
					buffer.append(MEASURE_MARKER);
					generateMeasure(buffer,"temperature", "Cº");
					<#
                        }
					#>
					<#
					if (sensor.Humidity)
                        {
                            #>
					buffer.append(MEASURE_MARKER);
					generateMeasure(buffer,"humidity", "RH");
					<#
                        }
					#><#
					if (sensor.Pressure)
                        {
                            #>
					buffer.append(MEASURE_MARKER);
					generateMeasure(buffer,"pressure", "psi");
					<#
                        }
					#><#
					if (sensor.Altitude)
                        {
                            #>
					buffer.append(MEASURE_MARKER);
					generateMeasure(buffer,"altitude", "m");
					<#
                        }
					#>
					buffer.append(LEC_TAIL);

					i++;
				}else{

					buffer.append(TXT_HEADER);
					buffer.append("Lore ipsum dolor");
					buffer.append(TXT_TAIL);

					i = 0;
				}


				String dataString = buffer.toString();
				monitor.dataObtained(dataString);

				try {
					Thread.sleep(timeLapse);
				} catch (InterruptedException e) {
					System.out.println("InfoThread ERROR: " + e);
				}
			}
		}
	}

	private String generateMeasure(StringBuffer buffer, String type, String unit){

		buffer.append(type);
		buffer.append(MARKER);
		int stop = ThreadLocalRandom.current().nextInt(1, 3);
		for (int j = 0; j < stop ; j++){
			buffer.append(ThreadLocalRandom.current().nextInt(0, 9));
		}
		buffer.append(".");
		buffer.append(ThreadLocalRandom.current().nextInt(0, 9));
		buffer.append(MARKER);
		buffer.append(unit);
		return buffer.toString();
	}

	public void close(){
		synchronized (lock) {
			closed = true;
			stop();
			lock.notify();
		}
	}
	public void stop(){
		synchronized (lock) {
			started = false;
		}
	}
	public void start(){
		synchronized (lock) {
			started = true;
			lock.notify();
		}
	}
	public boolean isStarted(){
		synchronized (lock){
			return started;
		}
	}

	public void setMonitor(BasicMonitor monitor) {
		this.monitor = monitor;

	}

}
<#
                        fileManager.StartNewFile("pom.xml");
#>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>UPM</groupId>
  <artifactId>IoTDslThingSpeak</artifactId>
  <version>1.0</version>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>1.8</java.version>
  </properties>


  <dependencies>
	
	<dependency>
	  <groupId>org.json</groupId>
	  <artifactId>json</artifactId>
	  <version>20090211</version>
   </dependency>

  <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.json</artifactId>
      <version>1.0.4</version>
  </dependency>

  </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>IoTDsl.Concentrator</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
<#
                    }
                }
            }
        }
    }
    fileManager.Process();
#>