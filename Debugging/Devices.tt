<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" lenguage="C#" hostspecific="True"#>
<#@ output extension=".ps1" #>
<#@ IotDsl processor="IotDslDirectiveProcessor" requires="fileName='Test.IotDsl'" #>
<#@ include file="EF.utility.CS.ttinclude" #>
<#
var fileManager=EntityFrameworkTemplateFileManager.Create(this);
if(this.IoTDsl.Devices.Count >= 1){
fileManager.StartNewFile("DeviceRegistration.cs");
#>
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Azure.Devices;
using Microsoft.Azure.Devices.Common.Exceptions;

namespace DeviceRegistration
{
	class Program
	{
		static RegistryManager registryManager;

		static void Main(string[] args)
		{
			var devices = new List<KeyValuePair<string,string>>(){
<#
foreach(Device device in this.IoTDsl.Devices){
	foreach(IoTCenter iot in device.IoTCenters){
#>
				new KeyValuePair<string,string>("<#=device.deviceId#>","<#=iot.ConnectionString#>"),
<#
	}
}
#>
			};
			foreach(KeyValuePair<string,string> device in devices){
				registryManager = RegistryManager.CreateFromConnectionString(device.Value);
				AddDeviceAsync(device.Key).Wait();
				Console.ReadLine();
			}
		}

		private static async Task AddDeviceAsync (string deviceId)
		{
			Device device;
			try
			{
				device = await registryManager.AddDeviceAsync(new Device(deviceId));
			}
			catch (DeviceAlreadyExistsException)
			{
				device = await registryManager.GetDeviceAsync(deviceId);
			}
			Console.WriteLine("Generated device key: {0}", device.Authentication.SymmetricKey.PrimaryKey);
		}
	}
}
<#
	foreach(Device device in this.IoTDsl.Devices)
	{
		fileManager.StartNewFile(device.deviceId+".cs");
#>
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

using Microsoft.Azure.Devices.Client;
using Newtonsoft.Json;
using BuildAzure.IoT.Adafruit.BME280;

using System.Diagnostics;
using System.Threading.Tasks;
using System.Text;

namespace IoTWeatherHubDevice
{
	public sealed partial class <#=device.deviceId#>
	{
		static string deviceId = "<#=device.deviceId#>";
		static string deviceKey = "deviceKeyAddField";
		static List<DeviceClient> deviceClientList;
	}
}
<#
	}
}
fileManager.Process();
#>
